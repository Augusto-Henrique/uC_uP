

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Wed Oct 01 11:12:04 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,space=0,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,space=0,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,space=0,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,space=0,delta=1
    16                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    17                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    18                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    19                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    20   000000                     
    21                           ; Generated 05/12/2024 GMT
    22                           ; 
    23                           ; Copyright Â© 2024, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution. Publication is not required when
    37                           ;        this file is used in an embedded application.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC18F4550 Definitions
    53                           ; 
    54                           ; SFR Addresses
    55   000FE0                     bsr             equ	4064
    56   000FE9                     fsr0            equ	4073
    57   000FEA                     fsr0h           equ	4074
    58   000FE9                     fsr0l           equ	4073
    59   000FE1                     fsr1            equ	4065
    60   000FE2                     fsr1h           equ	4066
    61   000FE1                     fsr1l           equ	4065
    62   000FD9                     fsr2            equ	4057
    63   000FDA                     fsr2h           equ	4058
    64   000FD9                     fsr2l           equ	4057
    65   000FEF                     indf0           equ	4079
    66   000FE7                     indf1           equ	4071
    67   000FDF                     indf2           equ	4063
    68   000FF2                     intcon          equ	4082
    69   000000                     nvmcon          equ	0
    70   000FF9                     pcl             equ	4089
    71   000FFA                     pclath          equ	4090
    72   000FFB                     pclatu          equ	4091
    73   000FEB                     plusw0          equ	4075
    74   000FE3                     plusw1          equ	4067
    75   000FDB                     plusw2          equ	4059
    76   000FED                     postdec0        equ	4077
    77   000FE5                     postdec1        equ	4069
    78   000FDD                     postdec2        equ	4061
    79   000FEE                     postinc0        equ	4078
    80   000FE6                     postinc1        equ	4070
    81   000FDE                     postinc2        equ	4062
    82   000FEC                     preinc0         equ	4076
    83   000FE4                     preinc1         equ	4068
    84   000FDC                     preinc2         equ	4060
    85   000FF3                     prod            equ	4083
    86   000FF4                     prodh           equ	4084
    87   000FF3                     prodl           equ	4083
    88   000FD8                     status          equ	4056
    89   000FF5                     tablat          equ	4085
    90   000FF6                     tblptr          equ	4086
    91   000FF7                     tblptrh         equ	4087
    92   000FF6                     tblptrl         equ	4086
    93   000FF8                     tblptru         equ	4088
    94   000FFD                     tosl            equ	4093
    95   000FE8                     wreg            equ	4072
    96   000F62                     SPPDATA         equ	3938	;# 
    97   000F63                     SPPCFG          equ	3939	;# 
    98   000F64                     SPPEPS          equ	3940	;# 
    99   000F65                     SPPCON          equ	3941	;# 
   100   000F66                     UFRM            equ	3942	;# 
   101   000F66                     UFRML           equ	3942	;# 
   102   000F67                     UFRMH           equ	3943	;# 
   103   000F68                     UIR             equ	3944	;# 
   104   000F69                     UIE             equ	3945	;# 
   105   000F6A                     UEIR            equ	3946	;# 
   106   000F6B                     UEIE            equ	3947	;# 
   107   000F6C                     USTAT           equ	3948	;# 
   108   000F6D                     UCON            equ	3949	;# 
   109   000F6E                     UADDR           equ	3950	;# 
   110   000F6F                     UCFG            equ	3951	;# 
   111   000F70                     UEP0            equ	3952	;# 
   112   000F71                     UEP1            equ	3953	;# 
   113   000F72                     UEP2            equ	3954	;# 
   114   000F73                     UEP3            equ	3955	;# 
   115   000F74                     UEP4            equ	3956	;# 
   116   000F75                     UEP5            equ	3957	;# 
   117   000F76                     UEP6            equ	3958	;# 
   118   000F77                     UEP7            equ	3959	;# 
   119   000F78                     UEP8            equ	3960	;# 
   120   000F79                     UEP9            equ	3961	;# 
   121   000F7A                     UEP10           equ	3962	;# 
   122   000F7B                     UEP11           equ	3963	;# 
   123   000F7C                     UEP12           equ	3964	;# 
   124   000F7D                     UEP13           equ	3965	;# 
   125   000F7E                     UEP14           equ	3966	;# 
   126   000F7F                     UEP15           equ	3967	;# 
   127   000F80                     PORTA           equ	3968	;# 
   128   000F81                     PORTB           equ	3969	;# 
   129   000F82                     PORTC           equ	3970	;# 
   130   000F83                     PORTD           equ	3971	;# 
   131   000F84                     PORTE           equ	3972	;# 
   132   000F89                     LATA            equ	3977	;# 
   133   000F8A                     LATB            equ	3978	;# 
   134   000F8B                     LATC            equ	3979	;# 
   135   000F8C                     LATD            equ	3980	;# 
   136   000F8D                     LATE            equ	3981	;# 
   137   000F92                     TRISA           equ	3986	;# 
   138   000F92                     DDRA            equ	3986	;# 
   139   000F93                     TRISB           equ	3987	;# 
   140   000F93                     DDRB            equ	3987	;# 
   141   000F94                     TRISC           equ	3988	;# 
   142   000F94                     DDRC            equ	3988	;# 
   143   000F95                     TRISD           equ	3989	;# 
   144   000F95                     DDRD            equ	3989	;# 
   145   000F96                     TRISE           equ	3990	;# 
   146   000F96                     DDRE            equ	3990	;# 
   147   000F9B                     OSCTUNE         equ	3995	;# 
   148   000F9D                     PIE1            equ	3997	;# 
   149   000F9E                     PIR1            equ	3998	;# 
   150   000F9F                     IPR1            equ	3999	;# 
   151   000FA0                     PIE2            equ	4000	;# 
   152   000FA1                     PIR2            equ	4001	;# 
   153   000FA2                     IPR2            equ	4002	;# 
   154   000FA6                     EECON1          equ	4006	;# 
   155   000FA7                     EECON2          equ	4007	;# 
   156   000FA8                     EEDATA          equ	4008	;# 
   157   000FA9                     EEADR           equ	4009	;# 
   158   000FAB                     RCSTA           equ	4011	;# 
   159   000FAB                     RCSTA1          equ	4011	;# 
   160   000FAC                     TXSTA           equ	4012	;# 
   161   000FAC                     TXSTA1          equ	4012	;# 
   162   000FAD                     TXREG           equ	4013	;# 
   163   000FAD                     TXREG1          equ	4013	;# 
   164   000FAE                     RCREG           equ	4014	;# 
   165   000FAE                     RCREG1          equ	4014	;# 
   166   000FAF                     SPBRG           equ	4015	;# 
   167   000FAF                     SPBRG1          equ	4015	;# 
   168   000FB0                     SPBRGH          equ	4016	;# 
   169   000FB1                     T3CON           equ	4017	;# 
   170   000FB2                     TMR3            equ	4018	;# 
   171   000FB2                     TMR3L           equ	4018	;# 
   172   000FB3                     TMR3H           equ	4019	;# 
   173   000FB4                     CMCON           equ	4020	;# 
   174   000FB5                     CVRCON          equ	4021	;# 
   175   000FB6                     ECCP1AS         equ	4022	;# 
   176   000FB6                     CCP1AS          equ	4022	;# 
   177   000FB7                     ECCP1DEL        equ	4023	;# 
   178   000FB7                     CCP1DEL         equ	4023	;# 
   179   000FB8                     BAUDCON         equ	4024	;# 
   180   000FB8                     BAUDCTL         equ	4024	;# 
   181   000FBA                     CCP2CON         equ	4026	;# 
   182   000FBB                     CCPR2           equ	4027	;# 
   183   000FBB                     CCPR2L          equ	4027	;# 
   184   000FBC                     CCPR2H          equ	4028	;# 
   185   000FBD                     CCP1CON         equ	4029	;# 
   186   000FBD                     ECCP1CON        equ	4029	;# 
   187   000FBE                     CCPR1           equ	4030	;# 
   188   000FBE                     CCPR1L          equ	4030	;# 
   189   000FBF                     CCPR1H          equ	4031	;# 
   190   000FC0                     ADCON2          equ	4032	;# 
   191   000FC1                     ADCON1          equ	4033	;# 
   192   000FC2                     ADCON0          equ	4034	;# 
   193   000FC3                     ADRES           equ	4035	;# 
   194   000FC3                     ADRESL          equ	4035	;# 
   195   000FC4                     ADRESH          equ	4036	;# 
   196   000FC5                     SSPCON2         equ	4037	;# 
   197   000FC6                     SSPCON1         equ	4038	;# 
   198   000FC7                     SSPSTAT         equ	4039	;# 
   199   000FC8                     SSPADD          equ	4040	;# 
   200   000FC9                     SSPBUF          equ	4041	;# 
   201   000FCA                     T2CON           equ	4042	;# 
   202   000FCB                     PR2             equ	4043	;# 
   203   000FCB                     MEMCON          equ	4043	;# 
   204   000FCC                     TMR2            equ	4044	;# 
   205   000FCD                     T1CON           equ	4045	;# 
   206   000FCE                     TMR1            equ	4046	;# 
   207   000FCE                     TMR1L           equ	4046	;# 
   208   000FCF                     TMR1H           equ	4047	;# 
   209   000FD0                     RCON            equ	4048	;# 
   210   000FD1                     WDTCON          equ	4049	;# 
   211   000FD2                     HLVDCON         equ	4050	;# 
   212   000FD2                     LVDCON          equ	4050	;# 
   213   000FD3                     OSCCON          equ	4051	;# 
   214   000FD5                     T0CON           equ	4053	;# 
   215   000FD6                     TMR0            equ	4054	;# 
   216   000FD6                     TMR0L           equ	4054	;# 
   217   000FD7                     TMR0H           equ	4055	;# 
   218   000FD8                     STATUS          equ	4056	;# 
   219   000FD9                     FSR2            equ	4057	;# 
   220   000FD9                     FSR2L           equ	4057	;# 
   221   000FDA                     FSR2H           equ	4058	;# 
   222   000FDB                     PLUSW2          equ	4059	;# 
   223   000FDC                     PREINC2         equ	4060	;# 
   224   000FDD                     POSTDEC2        equ	4061	;# 
   225   000FDE                     POSTINC2        equ	4062	;# 
   226   000FDF                     INDF2           equ	4063	;# 
   227   000FE0                     BSR             equ	4064	;# 
   228   000FE1                     FSR1            equ	4065	;# 
   229   000FE1                     FSR1L           equ	4065	;# 
   230   000FE2                     FSR1H           equ	4066	;# 
   231   000FE3                     PLUSW1          equ	4067	;# 
   232   000FE4                     PREINC1         equ	4068	;# 
   233   000FE5                     POSTDEC1        equ	4069	;# 
   234   000FE6                     POSTINC1        equ	4070	;# 
   235   000FE7                     INDF1           equ	4071	;# 
   236   000FE8                     WREG            equ	4072	;# 
   237   000FE9                     FSR0            equ	4073	;# 
   238   000FE9                     FSR0L           equ	4073	;# 
   239   000FEA                     FSR0H           equ	4074	;# 
   240   000FEB                     PLUSW0          equ	4075	;# 
   241   000FEC                     PREINC0         equ	4076	;# 
   242   000FED                     POSTDEC0        equ	4077	;# 
   243   000FEE                     POSTINC0        equ	4078	;# 
   244   000FEF                     INDF0           equ	4079	;# 
   245   000FF0                     INTCON3         equ	4080	;# 
   246   000FF1                     INTCON2         equ	4081	;# 
   247   000FF2                     INTCON          equ	4082	;# 
   248   000FF3                     PROD            equ	4083	;# 
   249   000FF3                     PRODL           equ	4083	;# 
   250   000FF4                     PRODH           equ	4084	;# 
   251   000FF5                     TABLAT          equ	4085	;# 
   252   000FF6                     TBLPTR          equ	4086	;# 
   253   000FF6                     TBLPTRL         equ	4086	;# 
   254   000FF7                     TBLPTRH         equ	4087	;# 
   255   000FF8                     TBLPTRU         equ	4088	;# 
   256   000FF9                     PCLAT           equ	4089	;# 
   257   000FF9                     PC              equ	4089	;# 
   258   000FF9                     PCL             equ	4089	;# 
   259   000FFA                     PCLATH          equ	4090	;# 
   260   000FFB                     PCLATU          equ	4091	;# 
   261   000FFC                     STKPTR          equ	4092	;# 
   262   000FFD                     TOS             equ	4093	;# 
   263   000FFD                     TOSL            equ	4093	;# 
   264   000FFE                     TOSH            equ	4094	;# 
   265   000FFF                     TOSU            equ	4095	;# 
   266                           
   267                           	psect	smallconst
   268   000800                     __psmallconst:
   269                           	callstack 0
   270   000800  00                 	db	0
   271   000801                     _steps_ccw:
   272                           	callstack 0
   273   000801  08                 	db	8
   274   000802  02                 	db	2
   275   000803  04                 	db	4
   276   000804  01                 	db	1
   277   000805                     __end_of_steps_ccw:
   278                           	callstack 0
   279   000805                     _steps_cw:
   280                           	callstack 0
   281   000805  01                 	db	1
   282   000806  04                 	db	4
   283   000807  02                 	db	2
   284   000808  08                 	db	8
   285   000809                     __end_of_steps_cw:
   286                           	callstack 0
   287   000F89                     _LATAbits       set	3977
   288   000F92                     _TRISA          set	3986
   289   000F95                     _TRISD          set	3989
   290   000F94                     _TRISC          set	3988
   291   000F93                     _TRISB          set	3987
   292   000FD3                     _OSCCON         set	4051
   293   000FC1                     _ADCON1         set	4033
   294   000F82                     _PORTCbits      set	3970
   295   000F8A                     _LATB           set	3978
   296   000F83                     _PORTDbits      set	3971
   297   000809  00                 	db	0	; dummy byte at the end
   298   000800                     __smallconst    set	__psmallconst
   299   000800                     __mediumconst   set	__psmallconst
   300   000002                     __activetblptr  equ	2
   301                           
   302                           ; #config settings
   303                           
   304                           	psect	cinit
   305   000F08                     __pcinit:
   306                           	callstack 0
   307   000F08                     start_initialization:
   308                           	callstack 0
   309   000F08                     __initialization:
   310                           	callstack 0
   311                           
   312                           ; Clear objects allocated to COMRAM (16 bytes)
   313   000F08  EE00  F014         	lfsr	0,__pbssCOMRAM
   314   000F0C  0E10               	movlw	16
   315   000F0E                     clear_0:
   316   000F0E  6AEE               	clrf	postinc0,c
   317   000F10  06E8               	decf	wreg,f,c
   318   000F12  E1FD               	bnz	clear_0
   319   000F14                     end_of_initialization:
   320                           	callstack 0
   321   000F14                     __end_of__initialization:
   322                           	callstack 0
   323   000F14  0E00               	movlw	low (__Lmediumconst shr (0+16))
   324   000F16  6EF8               	movwf	tblptru,c
   325   000F18  0100               	movlb	0
   326   000F1A  EFE4  F004         	goto	_main	;jump to C main() function
   327                           
   328                           	psect	bssCOMRAM
   329   000014                     __pbssCOMRAM:
   330                           	callstack 0
   331   000014                     	ds	4
   332   000018                     _downSteps:
   333                           	callstack 0
   334   000018                     	ds	2
   335   00001A                     _upSteps:
   336                           	callstack 0
   337   00001A                     	ds	2
   338   00001C                     _leftSteps:
   339                           	callstack 0
   340   00001C                     	ds	2
   341   00001E                     _rightSteps:
   342                           	callstack 0
   343   00001E                     	ds	2
   344   000020                     _positionZ:
   345                           	callstack 0
   346   000020                     	ds	2
   347   000022                     _positionXY:
   348                           	callstack 0
   349   000022                     	ds	2
   350                           
   351                           	psect	cstackCOMRAM
   352   000001                     __pcstackCOMRAM:
   353                           	callstack 0
   354   000001                     checkAllBtns@rtn:
   355                           	callstack 0
   356   000001                     rotateMotorXY@direction:
   357                           	callstack 0
   358   000001                     rotateMotorZ@direction:
   359                           	callstack 0
   360                           
   361                           ; 2 bytes @ 0x0
   362   000001                     	ds	1
   363   000002                     ??_checkAllBtns:
   364                           
   365                           ; 1 bytes @ 0x1
   366   000002                     	ds	1
   367   000003                     ??_rotateMotorXY:
   368   000003                     ??_rotateMotorZ:
   369                           
   370                           ; 1 bytes @ 0x2
   371   000003                     	ds	2
   372   000005                     rotateMotorXY@i:
   373                           	callstack 0
   374   000005                     rotateMotorZ@i:
   375                           	callstack 0
   376                           
   377                           ; 2 bytes @ 0x4
   378   000005                     	ds	2
   379   000007                     checkAllBtns@select:
   380                           	callstack 0
   381   000007                     rotateMotorXY@i_209:
   382                           	callstack 0
   383   000007                     rotateMotorZ@i_213:
   384                           	callstack 0
   385                           
   386                           ; 2 bytes @ 0x6
   387   000007                     	ds	2
   388   000009                     ??_calibrateMotorXY:
   389   000009                     ??_calibrateMotorZ:
   390                           
   391                           ; 1 bytes @ 0x8
   392   000009                     	ds	1
   393   00000A                     calibrateMotorXY@i:
   394                           	callstack 0
   395   00000A                     calibrateMotorZ@i:
   396                           	callstack 0
   397                           
   398                           ; 2 bytes @ 0x9
   399   00000A                     	ds	2
   400   00000C                     calibrateMotorXY@i_225:
   401                           	callstack 0
   402   00000C                     calibrateMotorZ@i_229:
   403                           	callstack 0
   404                           
   405                           ; 2 bytes @ 0xB
   406   00000C                     	ds	2
   407   00000E                     ??_setup:
   408                           
   409                           ; 1 bytes @ 0xD
   410   00000E                     	ds	1
   411   00000F                     ??_main:
   412                           
   413                           ; 1 bytes @ 0xE
   414   00000F                     	ds	1
   415   000010                     main@direction:
   416                           	callstack 0
   417                           
   418                           ; 4 bytes @ 0xF
   419   000010                     	ds	4
   420                           
   421 ;;
   422 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   423 ;;
   424 ;; *************** function _main *****************
   425 ;; Defined at:
   426 ;;		line 192 in file "../../src/main.c"
   427 ;; Parameters:    Size  Location     Type
   428 ;;		None
   429 ;; Auto vars:     Size  Location     Type
   430 ;;  direction       4   15[COMRAM] int [2]
   431 ;; Return value:  Size  Location     Type
   432 ;;                  1    wreg      void 
   433 ;; Registers used:
   434 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   435 ;; Tracked objects:
   436 ;;		On entry : 0/0
   437 ;;		On exit  : 0/0
   438 ;;		Unchanged: 0/0
   439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   440 ;;      Params:         0       0       0       0       0       0       0       0       0
   441 ;;      Locals:         4       0       0       0       0       0       0       0       0
   442 ;;      Temps:          1       0       0       0       0       0       0       0       0
   443 ;;      Totals:         5       0       0       0       0       0       0       0       0
   444 ;;Total ram usage:        5 bytes
   445 ;; Hardware stack levels required when called: 3
   446 ;; This function calls:
   447 ;;		_checkAllBtns
   448 ;;		_rotateMotorXY
   449 ;;		_rotateMotorZ
   450 ;;		_setup
   451 ;; This function is called by:
   452 ;;		Startup code after reset
   453 ;; This function uses a non-reentrant model
   454 ;;
   455                           
   456                           	psect	text0
   457   0009C8                     __ptext0:
   458                           	callstack 0
   459   0009C8                     _main:
   460                           	callstack 28
   461   0009C8                     
   462                           ;../../src/main.c: 193:             positionXY++;
   463   0009C8  EC56  F007         	call	_setup	;wreg free
   464   0009CC                     
   465                           ;../../src/main.c: 194:         }
   466   0009CC  0E00               	movlw	0
   467   0009CE  6E10               	movwf	main@direction^0,c
   468   0009D0  0E00               	movlw	0
   469   0009D2  6E11               	movwf	(main@direction+1)^0,c
   470   0009D4  0E00               	movlw	0
   471   0009D6  6E12               	movwf	(main@direction+2)^0,c
   472   0009D8  0E00               	movlw	0
   473   0009DA  6E13               	movwf	(main@direction+3)^0,c
   474   0009DC                     l1318:
   475                           
   476                           ;../../src/main.c: 197:             positionXY--;
   477   0009DC  0E34               	movlw	52
   478   0009DE  6E0F               	movwf	??_main^0,c
   479   0009E0  0EF2               	movlw	242
   480   0009E2                     u737:
   481   0009E2  2EE8               	decfsz	wreg,f,c
   482   0009E4  D7FE               	bra	u737
   483   0009E6  2E0F               	decfsz	??_main^0,f,c
   484   0009E8  D7FC               	bra	u737
   485   0009EA                     
   486                           ;../../src/main.c: 198:         }
   487   0009EA  0E10               	movlw	low main@direction
   488   0009EC  6E01               	movwf	checkAllBtns@rtn^0,c
   489   0009EE  EC05  F004         	call	_checkAllBtns	;wreg free
   490   0009F2                     
   491                           ;../../src/main.c: 200: 
   492   0009F2  0412               	decf	(main@direction+2)^0,w,c
   493   0009F4  1013               	iorwf	(main@direction+3)^0,w,c
   494   0009F6  A4D8               	btfss	status,2,c
   495   0009F8  EF00  F005         	goto	u651
   496   0009FC  EF02  F005         	goto	u650
   497   000A00                     u651:
   498   000A00  EF19  F005         	goto	l1330
   499   000A04                     u650:
   500   000A04  501E               	movf	_rightSteps^0,w,c
   501   000A06  5C22               	subwf	_positionXY^0,w,c
   502   000A08  5023               	movf	(_positionXY+1)^0,w,c
   503   000A0A  0A80               	xorlw	128
   504   000A0C  6E0F               	movwf	??_main^0,c
   505   000A0E  501F               	movf	(_rightSteps+1)^0,w,c
   506   000A10  0A80               	xorlw	128
   507   000A12  580F               	subwfb	??_main^0,w,c
   508   000A14  B0D8               	btfsc	status,0,c
   509   000A16  EF0F  F005         	goto	u661
   510   000A1A  EF11  F005         	goto	u660
   511   000A1E                     u661:
   512   000A1E  EF19  F005         	goto	l1330
   513   000A22                     u660:
   514   000A22                     
   515                           ;../../src/main.c: 201:         if (direction[0] == 1 && positionZ < downSteps) {
   516   000A22  0E00               	movlw	0
   517   000A24  6E02               	movwf	(rotateMotorXY@direction+1)^0,c
   518   000A26  0E01               	movlw	1
   519   000A28  6E01               	movwf	rotateMotorXY@direction^0,c
   520   000A2A  ECEA  F006         	call	_rotateMotorXY	;wreg free
   521   000A2E                     
   522                           ;../../src/main.c: 202:             rotateMotorZ(1);
   523   000A2E  4A22               	infsnz	_positionXY^0,f,c
   524   000A30  2A23               	incf	(_positionXY+1)^0,f,c
   525   000A32                     l1330:
   526                           
   527                           ;../../src/main.c: 204:         }
   528   000A32  0E02               	movlw	2
   529   000A34  1812               	xorwf	(main@direction+2)^0,w,c
   530   000A36  1013               	iorwf	(main@direction+3)^0,w,c
   531   000A38  A4D8               	btfss	status,2,c
   532   000A3A  EF21  F005         	goto	u671
   533   000A3E  EF23  F005         	goto	u670
   534   000A42                     u671:
   535   000A42  EF3B  F005         	goto	l1338
   536   000A46                     u670:
   537   000A46  5022               	movf	_positionXY^0,w,c
   538   000A48  5C1C               	subwf	_leftSteps^0,w,c
   539   000A4A  501D               	movf	(_leftSteps+1)^0,w,c
   540   000A4C  0A80               	xorlw	128
   541   000A4E  6E0F               	movwf	??_main^0,c
   542   000A50  5023               	movf	(_positionXY+1)^0,w,c
   543   000A52  0A80               	xorlw	128
   544   000A54  580F               	subwfb	??_main^0,w,c
   545   000A56  B0D8               	btfsc	status,0,c
   546   000A58  EF30  F005         	goto	u681
   547   000A5C  EF32  F005         	goto	u680
   548   000A60                     u681:
   549   000A60  EF3B  F005         	goto	l1338
   550   000A64                     u680:
   551   000A64                     
   552                           ;../../src/main.c: 205:         if (direction[0] == 2 && positionZ > upSteps) {
   553   000A64  0E00               	movlw	0
   554   000A66  6E02               	movwf	(rotateMotorXY@direction+1)^0,c
   555   000A68  0E02               	movlw	2
   556   000A6A  6E01               	movwf	rotateMotorXY@direction^0,c
   557   000A6C  ECEA  F006         	call	_rotateMotorXY	;wreg free
   558   000A70                     
   559                           ;../../src/main.c: 206:             rotateMotorZ(2);
   560   000A70  0622               	decf	_positionXY^0,f,c
   561   000A72  A0D8               	btfss	status,0,c
   562   000A74  0623               	decf	(_positionXY+1)^0,f,c
   563   000A76                     l1338:
   564                           
   565                           ;../../src/main.c: 210:     }
   566   000A76  0410               	decf	main@direction^0,w,c
   567   000A78  1011               	iorwf	(main@direction+1)^0,w,c
   568   000A7A  A4D8               	btfss	status,2,c
   569   000A7C  EF42  F005         	goto	u691
   570   000A80  EF44  F005         	goto	u690
   571   000A84                     u691:
   572   000A84  EF5B  F005         	goto	l1346
   573   000A88                     u690:
   574   000A88  5018               	movf	_downSteps^0,w,c
   575   000A8A  5C20               	subwf	_positionZ^0,w,c
   576   000A8C  5021               	movf	(_positionZ+1)^0,w,c
   577   000A8E  0A80               	xorlw	128
   578   000A90  6E0F               	movwf	??_main^0,c
   579   000A92  5019               	movf	(_downSteps+1)^0,w,c
   580   000A94  0A80               	xorlw	128
   581   000A96  580F               	subwfb	??_main^0,w,c
   582   000A98  B0D8               	btfsc	status,0,c
   583   000A9A  EF51  F005         	goto	u701
   584   000A9E  EF53  F005         	goto	u700
   585   000AA2                     u701:
   586   000AA2  EF5B  F005         	goto	l1346
   587   000AA6                     u700:
   588   000AA6                     
   589                           ;../../src/main.c: 211: }
   590   000AA6  0E00               	movlw	0
   591   000AA8  6E02               	movwf	(rotateMotorZ@direction+1)^0,c
   592   000AAA  0E01               	movlw	1
   593   000AAC  6E01               	movwf	rotateMotorZ@direction^0,c
   594   000AAE  EC78  F006         	call	_rotateMotorZ	;wreg free
   595   000AB2  4A20               	infsnz	_positionZ^0,f,c
   596   000AB4  2A21               	incf	(_positionZ+1)^0,f,c
   597   000AB6                     l1346:
   598   000AB6  0E02               	movlw	2
   599   000AB8  1810               	xorwf	main@direction^0,w,c
   600   000ABA  1011               	iorwf	(main@direction+1)^0,w,c
   601   000ABC  A4D8               	btfss	status,2,c
   602   000ABE  EF63  F005         	goto	u711
   603   000AC2  EF65  F005         	goto	u710
   604   000AC6                     u711:
   605   000AC6  EF7D  F005         	goto	l1354
   606   000ACA                     u710:
   607   000ACA  5020               	movf	_positionZ^0,w,c
   608   000ACC  5C1A               	subwf	_upSteps^0,w,c
   609   000ACE  501B               	movf	(_upSteps+1)^0,w,c
   610   000AD0  0A80               	xorlw	128
   611   000AD2  6E0F               	movwf	??_main^0,c
   612   000AD4  5021               	movf	(_positionZ+1)^0,w,c
   613   000AD6  0A80               	xorlw	128
   614   000AD8  580F               	subwfb	??_main^0,w,c
   615   000ADA  B0D8               	btfsc	status,0,c
   616   000ADC  EF72  F005         	goto	u721
   617   000AE0  EF74  F005         	goto	u720
   618   000AE4                     u721:
   619   000AE4  EF7D  F005         	goto	l1354
   620   000AE8                     u720:
   621   000AE8  0E00               	movlw	0
   622   000AEA  6E02               	movwf	(rotateMotorZ@direction+1)^0,c
   623   000AEC  0E02               	movlw	2
   624   000AEE  6E01               	movwf	rotateMotorZ@direction^0,c
   625   000AF0  EC78  F006         	call	_rotateMotorZ	;wreg free
   626   000AF4  0620               	decf	_positionZ^0,f,c
   627   000AF6  A0D8               	btfss	status,0,c
   628   000AF8  0621               	decf	(_positionZ+1)^0,f,c
   629   000AFA                     l1354:
   630   000AFA  0E34               	movlw	52
   631   000AFC  6E0F               	movwf	??_main^0,c
   632   000AFE  0EF2               	movlw	242
   633   000B00                     u747:
   634   000B00  2EE8               	decfsz	wreg,f,c
   635   000B02  D7FE               	bra	u747
   636   000B04  2E0F               	decfsz	??_main^0,f,c
   637   000B06  D7FC               	bra	u747
   638   000B08  EFEE  F004         	goto	l1318
   639   000B0C  EFFE  F03F         	goto	start
   640   000B10                     __end_of_main:
   641                           	callstack 0
   642                           
   643 ;; *************** function _setup *****************
   644 ;; Defined at:
   645 ;;		line 163 in file "../../src/main.c"
   646 ;; Parameters:    Size  Location     Type
   647 ;;		None
   648 ;; Auto vars:     Size  Location     Type
   649 ;;		None
   650 ;; Return value:  Size  Location     Type
   651 ;;                  1    wreg      void 
   652 ;; Registers used:
   653 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   654 ;; Tracked objects:
   655 ;;		On entry : 0/0
   656 ;;		On exit  : 0/0
   657 ;;		Unchanged: 0/0
   658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   659 ;;      Params:         0       0       0       0       0       0       0       0       0
   660 ;;      Locals:         0       0       0       0       0       0       0       0       0
   661 ;;      Temps:          1       0       0       0       0       0       0       0       0
   662 ;;      Totals:         1       0       0       0       0       0       0       0       0
   663 ;;Total ram usage:        1 bytes
   664 ;; Hardware stack levels used: 1
   665 ;; Hardware stack levels required when called: 2
   666 ;; This function calls:
   667 ;;		_calibrateMotorXY
   668 ;;		_calibrateMotorZ
   669 ;; This function is called by:
   670 ;;		_main
   671 ;; This function uses a non-reentrant model
   672 ;;
   673                           
   674                           	psect	text1
   675   000EAC                     __ptext1:
   676                           	callstack 0
   677   000EAC                     _setup:
   678                           	callstack 28
   679   000EAC                     
   680                           ;../../src/main.c: 164: 
   681   000EAC  0E0F               	movlw	15
   682   000EAE  6EC1               	movwf	193,c	;volatile
   683                           
   684                           ;../../src/main.c: 165:     TRISA &= ~0x7;
   685   000EB0  0E70               	movlw	112
   686   000EB2  6ED3               	movwf	211,c	;volatile
   687   000EB4                     
   688                           ;../../src/main.c: 168:     LATAbits.LATA1 = 0;
   689   000EB4  6A93               	clrf	147,c	;volatile
   690   000EB6                     
   691                           ;../../src/main.c: 170:     _delay((unsigned long)((20)*(8000000/4000.0)));
   692   000EB6  0E33               	movlw	51
   693   000EB8  1294               	iorwf	148,f,c	;volatile
   694   000EBA                     
   695                           ;../../src/main.c: 172:     LATAbits.LATA0 = 0;
   696   000EBA  0E0F               	movlw	15
   697   000EBC  1295               	iorwf	149,f,c	;volatile
   698   000EBE                     
   699                           ;../../src/main.c: 174:     LATAbits.LATA2 = 0;
   700   000EBE  0EF8               	movlw	248
   701   000EC0  1692               	andwf	146,f,c	;volatile
   702   000EC2                     
   703                           ;../../src/main.c: 176:     calibrateMotorZ();
   704   000EC2  8089               	bsf	137,0,c	;volatile
   705   000EC4                     
   706                           ;../../src/main.c: 177:     LATAbits.LATA0 = 1;
   707   000EC4  9289               	bcf	137,1,c	;volatile
   708   000EC6                     
   709                           ;../../src/main.c: 178:     LATAbits.LATA1 = 0;
   710   000EC6  9489               	bcf	137,2,c	;volatile
   711   000EC8                     
   712                           ;../../src/main.c: 179:     LATAbits.LATA2 = 0;
   713   000EC8  0E34               	movlw	52
   714   000ECA  6E0E               	movwf	??_setup^0,c
   715   000ECC  0EF2               	movlw	242
   716   000ECE                     u757:
   717   000ECE  2EE8               	decfsz	wreg,f,c
   718   000ED0  D7FE               	bra	u757
   719   000ED2  2E0E               	decfsz	??_setup^0,f,c
   720   000ED4  D7FC               	bra	u757
   721   000ED6                     
   722                           ;../../src/main.c: 180:     _delay((unsigned long)((20)*(8000000/4000.0)));
   723   000ED6  EC00  F006         	call	_calibrateMotorXY	;wreg free
   724   000EDA                     
   725                           ;../../src/main.c: 181: }
   726   000EDA  9089               	bcf	137,0,c	;volatile
   727   000EDC                     
   728                           ;../../src/main.c: 182: 
   729   000EDC  8289               	bsf	137,1,c	;volatile
   730   000EDE                     
   731                           ;../../src/main.c: 183: void main(void) {
   732   000EDE  9489               	bcf	137,2,c	;volatile
   733   000EE0                     
   734                           ;../../src/main.c: 184:     setup();
   735   000EE0  0E34               	movlw	52
   736   000EE2  6E0E               	movwf	??_setup^0,c
   737   000EE4  0EF2               	movlw	242
   738   000EE6                     u767:
   739   000EE6  2EE8               	decfsz	wreg,f,c
   740   000EE8  D7FE               	bra	u767
   741   000EEA  2E0E               	decfsz	??_setup^0,f,c
   742   000EEC  D7FC               	bra	u767
   743   000EEE                     
   744                           ;../../src/main.c: 185:     int direction[2] = {0};
   745   000EEE  EC88  F005         	call	_calibrateMotorZ	;wreg free
   746   000EF2                     
   747                           ;../../src/main.c: 186: 
   748   000EF2  8089               	bsf	137,0,c	;volatile
   749   000EF4                     
   750                           ;../../src/main.c: 187:     while (1) {
   751   000EF4  9289               	bcf	137,1,c	;volatile
   752   000EF6                     
   753                           ;../../src/main.c: 188:        _delay((unsigned long)((20)*(8000000/4000.0)));
   754   000EF6  9489               	bcf	137,2,c	;volatile
   755   000EF8                     
   756                           ;../../src/main.c: 189:        checkAllBtns(direction);
   757   000EF8  0E34               	movlw	52
   758   000EFA  6E0E               	movwf	??_setup^0,c
   759   000EFC  0EF2               	movlw	242
   760   000EFE                     u777:
   761   000EFE  2EE8               	decfsz	wreg,f,c
   762   000F00  D7FE               	bra	u777
   763   000F02  2E0E               	decfsz	??_setup^0,f,c
   764   000F04  D7FC               	bra	u777
   765   000F06  0012               	return		;funcret
   766   000F08                     __end_of_setup:
   767                           	callstack 0
   768                           
   769 ;; *************** function _calibrateMotorZ *****************
   770 ;; Defined at:
   771 ;;		line 139 in file "../../src/main.c"
   772 ;; Parameters:    Size  Location     Type
   773 ;;		None
   774 ;; Auto vars:     Size  Location     Type
   775 ;;  i               2   11[COMRAM] int 
   776 ;;  i               2    9[COMRAM] int 
   777 ;; Return value:  Size  Location     Type
   778 ;;                  1    wreg      void 
   779 ;; Registers used:
   780 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   781 ;; Tracked objects:
   782 ;;		On entry : 0/0
   783 ;;		On exit  : 0/0
   784 ;;		Unchanged: 0/0
   785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   786 ;;      Params:         0       0       0       0       0       0       0       0       0
   787 ;;      Locals:         4       0       0       0       0       0       0       0       0
   788 ;;      Temps:          1       0       0       0       0       0       0       0       0
   789 ;;      Totals:         5       0       0       0       0       0       0       0       0
   790 ;;Total ram usage:        5 bytes
   791 ;; Hardware stack levels used: 1
   792 ;; Hardware stack levels required when called: 1
   793 ;; This function calls:
   794 ;;		_rotateMotorZ
   795 ;; This function is called by:
   796 ;;		_setup
   797 ;; This function uses a non-reentrant model
   798 ;;
   799                           
   800                           	psect	text2
   801   000B10                     __ptext2:
   802                           	callstack 0
   803   000B10                     _calibrateMotorZ:
   804                           	callstack 28
   805   000B10                     
   806                           ;../../src/main.c: 140:         rotateMotorZ(2);
   807   000B10  0E00               	movlw	0
   808   000B12  6E1B               	movwf	(_upSteps+1)^0,c
   809   000B14  0E00               	movlw	0
   810   000B16  6E1A               	movwf	_upSteps^0,c
   811                           
   812                           ;../../src/main.c: 141:         _delay((unsigned long)((10)*(8000000/4000.0)));
   813   000B18  0E00               	movlw	0
   814   000B1A  6E19               	movwf	(_downSteps+1)^0,c
   815   000B1C  0E00               	movlw	0
   816   000B1E  6E18               	movwf	_downSteps^0,c
   817                           
   818                           ;../../src/main.c: 142:     }
   819   000B20  0E00               	movlw	0
   820   000B22  6E21               	movwf	(_positionZ+1)^0,c
   821   000B24  0E00               	movlw	0
   822   000B26  6E20               	movwf	_positionZ^0,c
   823                           
   824                           ;../../src/main.c: 144:         rotateMotorZ(2);
   825   000B28  EF9E  F005         	goto	l1190
   826   000B2C                     l1186:
   827                           
   828                           ;../../src/main.c: 145:         upSteps--;
   829   000B2C  0E00               	movlw	0
   830   000B2E  6E02               	movwf	(rotateMotorZ@direction+1)^0,c
   831   000B30  0E01               	movlw	1
   832   000B32  6E01               	movwf	rotateMotorZ@direction^0,c
   833   000B34  EC78  F006         	call	_rotateMotorZ	;wreg free
   834   000B38                     
   835                           ;../../src/main.c: 146:     }
   836   000B38  4A18               	infsnz	_downSteps^0,f,c
   837   000B3A  2A19               	incf	(_downSteps+1)^0,f,c
   838   000B3C                     l1190:
   839                           
   840                           ;../../src/main.c: 144:         rotateMotorZ(2);
   841   000B3C  A882               	btfss	130,4,c	;volatile
   842   000B3E  EFA3  F005         	goto	u491
   843   000B42  EFA5  F005         	goto	u490
   844   000B46                     u491:
   845   000B46  EF96  F005         	goto	l1186
   846   000B4A                     u490:
   847   000B4A                     
   848                           ;../../src/main.c: 148:         rotateMotorZ(1);
   849   000B4A  0E00               	movlw	0
   850   000B4C  6E0B               	movwf	(calibrateMotorZ@i+1)^0,c
   851   000B4E  0E00               	movlw	0
   852   000B50  6E0A               	movwf	calibrateMotorZ@i^0,c
   853   000B52  EFBB  F005         	goto	l1200
   854   000B56                     l1194:
   855                           
   856                           ;../../src/main.c: 149:         _delay((unsigned long)((10)*(8000000/4000.0)));
   857   000B56  0E00               	movlw	0
   858   000B58  6E02               	movwf	(rotateMotorZ@direction+1)^0,c
   859   000B5A  0E02               	movlw	2
   860   000B5C  6E01               	movwf	rotateMotorZ@direction^0,c
   861   000B5E  EC78  F006         	call	_rotateMotorZ	;wreg free
   862   000B62                     
   863                           ;../../src/main.c: 150:     }
   864   000B62  0E1A               	movlw	26
   865   000B64  6E09               	movwf	??_calibrateMotorZ^0,c
   866   000B66  0EF8               	movlw	248
   867   000B68                     u787:
   868   000B68  2EE8               	decfsz	wreg,f,c
   869   000B6A  D7FE               	bra	u787
   870   000B6C  2E09               	decfsz	??_calibrateMotorZ^0,f,c
   871   000B6E  D7FC               	bra	u787
   872   000B70  D000               	nop2	
   873   000B72                     
   874                           ;../../src/main.c: 151:     positionZ = 0;
   875   000B72  4A0A               	infsnz	calibrateMotorZ@i^0,f,c
   876   000B74  2A0B               	incf	(calibrateMotorZ@i+1)^0,f,c
   877   000B76                     l1200:
   878   000B76  5018               	movf	_downSteps^0,w,c
   879   000B78  5C0A               	subwf	calibrateMotorZ@i^0,w,c
   880   000B7A  500B               	movf	(calibrateMotorZ@i+1)^0,w,c
   881   000B7C  0A80               	xorlw	128
   882   000B7E  6E09               	movwf	??_calibrateMotorZ^0,c
   883   000B80  5019               	movf	(_downSteps+1)^0,w,c
   884   000B82  0A80               	xorlw	128
   885   000B84  5809               	subwfb	??_calibrateMotorZ^0,w,c
   886   000B86  A0D8               	btfss	status,0,c
   887   000B88  EFC8  F005         	goto	u501
   888   000B8C  EFCA  F005         	goto	u500
   889   000B90                     u501:
   890   000B90  EFAB  F005         	goto	l1194
   891   000B94                     u500:
   892   000B94  EFD5  F005         	goto	l1206
   893   000B98                     l1202:
   894                           
   895                           ;../../src/main.c: 153: 
   896   000B98  0E00               	movlw	0
   897   000B9A  6E02               	movwf	(rotateMotorZ@direction+1)^0,c
   898   000B9C  0E02               	movlw	2
   899   000B9E  6E01               	movwf	rotateMotorZ@direction^0,c
   900   000BA0  EC78  F006         	call	_rotateMotorZ	;wreg free
   901   000BA4                     
   902                           ;../../src/main.c: 154: void setup(void) {
   903   000BA4  061A               	decf	_upSteps^0,f,c
   904   000BA6  A0D8               	btfss	status,0,c
   905   000BA8  061B               	decf	(_upSteps+1)^0,f,c
   906   000BAA                     l1206:
   907                           
   908                           ;../../src/main.c: 152: }
   909   000BAA  AA82               	btfss	130,5,c	;volatile
   910   000BAC  EFDA  F005         	goto	u511
   911   000BB0  EFDC  F005         	goto	u510
   912   000BB4                     u511:
   913   000BB4  EFCC  F005         	goto	l1202
   914   000BB8                     u510:
   915   000BB8                     
   916                           ;../../src/main.c: 156:     OSCCON = 0x70;
   917   000BB8  C01A  F00C         	movff	_upSteps,calibrateMotorZ@i_229
   918   000BBC  C01B  F00D         	movff	_upSteps+1,calibrateMotorZ@i_229+1
   919   000BC0                     l1208:
   920   000BC0  BE0D               	btfsc	(calibrateMotorZ@i_229+1)^0,7,c
   921   000BC2  EFE5  F005         	goto	u521
   922   000BC6  EFE7  F005         	goto	u520
   923   000BCA                     u521:
   924   000BCA  EFE9  F005         	goto	l1212
   925   000BCE                     u520:
   926   000BCE  EFFB  F005         	goto	l1220
   927   000BD2                     l1212:
   928                           
   929                           ;../../src/main.c: 157: 
   930   000BD2  0E00               	movlw	0
   931   000BD4  6E02               	movwf	(rotateMotorZ@direction+1)^0,c
   932   000BD6  0E01               	movlw	1
   933   000BD8  6E01               	movwf	rotateMotorZ@direction^0,c
   934   000BDA  EC78  F006         	call	_rotateMotorZ	;wreg free
   935   000BDE                     
   936                           ;../../src/main.c: 158: 
   937   000BDE  0E1A               	movlw	26
   938   000BE0  6E09               	movwf	??_calibrateMotorZ^0,c
   939   000BE2  0EF8               	movlw	248
   940   000BE4                     u797:
   941   000BE4  2EE8               	decfsz	wreg,f,c
   942   000BE6  D7FE               	bra	u797
   943   000BE8  2E09               	decfsz	??_calibrateMotorZ^0,f,c
   944   000BEA  D7FC               	bra	u797
   945   000BEC  D000               	nop2	
   946   000BEE                     
   947                           ;../../src/main.c: 159:     TRISB &= ~0xFF;
   948   000BEE  4A0C               	infsnz	calibrateMotorZ@i_229^0,f,c
   949   000BF0  2A0D               	incf	(calibrateMotorZ@i_229+1)^0,f,c
   950   000BF2  EFE0  F005         	goto	l1208
   951   000BF6                     l1220:
   952                           
   953                           ;../../src/main.c: 160: 
   954   000BF6  0E00               	movlw	0
   955   000BF8  6E21               	movwf	(_positionZ+1)^0,c
   956   000BFA  0E00               	movlw	0
   957   000BFC  6E20               	movwf	_positionZ^0,c
   958   000BFE  0012               	return		;funcret
   959   000C00                     __end_of_calibrateMotorZ:
   960                           	callstack 0
   961                           
   962 ;; *************** function _rotateMotorZ *****************
   963 ;; Defined at:
   964 ;;		line 95 in file "../../src/main.c"
   965 ;; Parameters:    Size  Location     Type
   966 ;;  direction       2    0[COMRAM] int 
   967 ;; Auto vars:     Size  Location     Type
   968 ;;  i               2    6[COMRAM] int 
   969 ;;  i               2    4[COMRAM] int 
   970 ;; Return value:  Size  Location     Type
   971 ;;                  1    wreg      void 
   972 ;; Registers used:
   973 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
   974 ;; Tracked objects:
   975 ;;		On entry : 0/0
   976 ;;		On exit  : 0/0
   977 ;;		Unchanged: 0/0
   978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   979 ;;      Params:         2       0       0       0       0       0       0       0       0
   980 ;;      Locals:         4       0       0       0       0       0       0       0       0
   981 ;;      Temps:          2       0       0       0       0       0       0       0       0
   982 ;;      Totals:         8       0       0       0       0       0       0       0       0
   983 ;;Total ram usage:        8 bytes
   984 ;; Hardware stack levels used: 1
   985 ;; This function calls:
   986 ;;		Nothing
   987 ;; This function is called by:
   988 ;;		_calibrateMotorZ
   989 ;;		_main
   990 ;; This function uses a non-reentrant model
   991 ;;
   992                           
   993                           	psect	text3
   994   000CF0                     __ptext3:
   995                           	callstack 0
   996   000CF0                     _rotateMotorZ:
   997                           	callstack 28
   998   000CF0                     
   999                           ;../../src/main.c: 96:         for (int i = 0; i < 4; i++) {
  1000   000CF0  0401               	decf	rotateMotorZ@direction^0,w,c
  1001   000CF2  1002               	iorwf	(rotateMotorZ@direction+1)^0,w,c
  1002   000CF4  A4D8               	btfss	status,2,c
  1003   000CF6  EF7F  F006         	goto	u411
  1004   000CFA  EF81  F006         	goto	u410
  1005   000CFE                     u411:
  1006   000CFE  EFAF  F006         	goto	l1128
  1007   000D02                     u410:
  1008   000D02                     
  1009                           ;../../src/main.c: 98:             _delay((unsigned long)((50)*(8000000/4000.0)));
  1010   000D02  0E00               	movlw	0
  1011   000D04  6E06               	movwf	(rotateMotorZ@i+1)^0,c
  1012   000D06  0E00               	movlw	0
  1013   000D08  6E05               	movwf	rotateMotorZ@i^0,c
  1014   000D0A                     l1120:
  1015                           
  1016                           ;../../src/main.c: 99:         }
  1017   000D0A  5005               	movf	rotateMotorZ@i^0,w,c
  1018   000D0C  0F05               	addlw	low _steps_cw
  1019   000D0E  6E03               	movwf	??_rotateMotorZ^0,c
  1020   000D10  C003  FFF6         	movff	??_rotateMotorZ,tblptrl
  1021   000D14                     	if	1	;There is more than 1 active tblptr byte
  1022   000D14  0E08               	movlw	high __smallconst
  1023   000D16  6EF7               	movwf	tblptrh,c
  1024   000D18                     	endif
  1025   000D18                     	if	0	;tblptru may be non-zero
  1026   000D18                     	endif
  1027   000D18                     	if	0	;tblptru may be non-zero
  1028   000D18                     	endif
  1029   000D18  0008               	tblrd		*
  1030   000D1A  CFF5 F004          	movff	tablat,??_rotateMotorZ+1
  1031   000D1E  3A04               	swapf	(??_rotateMotorZ+1)^0,f,c
  1032   000D20  0EF0               	movlw	240
  1033   000D22  1604               	andwf	(??_rotateMotorZ+1)^0,f,c
  1034   000D24  508A               	movf	138,w,c	;volatile
  1035   000D26  0B0F               	andlw	15
  1036   000D28  1004               	iorwf	(??_rotateMotorZ+1)^0,w,c
  1037   000D2A  6E8A               	movwf	138,c	;volatile
  1038   000D2C                     
  1039                           ;../../src/main.c: 100:     }
  1040   000D2C  0E82               	movlw	130
  1041   000D2E  6E03               	movwf	??_rotateMotorZ^0,c
  1042   000D30  0EDE               	movlw	222
  1043   000D32                     u807:
  1044   000D32  2EE8               	decfsz	wreg,f,c
  1045   000D34  D7FE               	bra	u807
  1046   000D36  2E03               	decfsz	??_rotateMotorZ^0,f,c
  1047   000D38  D7FC               	bra	u807
  1048   000D3A                     
  1049                           ;../../src/main.c: 101:     else {
  1050   000D3A  4A05               	infsnz	rotateMotorZ@i^0,f,c
  1051   000D3C  2A06               	incf	(rotateMotorZ@i+1)^0,f,c
  1052   000D3E  BE06               	btfsc	(rotateMotorZ@i+1)^0,7,c
  1053   000D40  EFAB  F006         	goto	u421
  1054   000D44  5006               	movf	(rotateMotorZ@i+1)^0,w,c
  1055   000D46  E109               	bnz	u420
  1056   000D48  0E04               	movlw	4
  1057   000D4A  5C05               	subwf	rotateMotorZ@i^0,w,c
  1058   000D4C  A0D8               	btfss	status,0,c
  1059   000D4E  EFAB  F006         	goto	u421
  1060   000D52  EFAD  F006         	goto	u420
  1061   000D56                     u421:
  1062   000D56  EF85  F006         	goto	l1120
  1063   000D5A                     u420:
  1064   000D5A  EFE9  F006         	goto	l79
  1065   000D5E                     l1128:
  1066   000D5E  0E02               	movlw	2
  1067   000D60  1801               	xorwf	rotateMotorZ@direction^0,w,c
  1068   000D62  1002               	iorwf	(rotateMotorZ@direction+1)^0,w,c
  1069   000D64  A4D8               	btfss	status,2,c
  1070   000D66  EFB7  F006         	goto	u431
  1071   000D6A  EFB9  F006         	goto	u430
  1072   000D6E                     u431:
  1073   000D6E  EFE7  F006         	goto	l1144
  1074   000D72                     u430:
  1075   000D72                     
  1076                           ;../../src/main.c: 105: 
  1077   000D72  0E00               	movlw	0
  1078   000D74  6E08               	movwf	(rotateMotorZ@i_213+1)^0,c
  1079   000D76  0E00               	movlw	0
  1080   000D78  6E07               	movwf	rotateMotorZ@i_213^0,c
  1081   000D7A                     l1136:
  1082                           
  1083                           ;../../src/main.c: 106: void calibrateMotorXY() {
  1084   000D7A  5007               	movf	rotateMotorZ@i_213^0,w,c
  1085   000D7C  0F01               	addlw	low _steps_ccw
  1086   000D7E  6E03               	movwf	??_rotateMotorZ^0,c
  1087   000D80  C003  FFF6         	movff	??_rotateMotorZ,tblptrl
  1088   000D84                     	if	1	;There is more than 1 active tblptr byte
  1089   000D84  0E08               	movlw	high __smallconst
  1090   000D86  6EF7               	movwf	tblptrh,c
  1091   000D88                     	endif
  1092   000D88                     	if	0	;tblptru may be non-zero
  1093   000D88                     	endif
  1094   000D88                     	if	0	;tblptru may be non-zero
  1095   000D88                     	endif
  1096   000D88  0008               	tblrd		*
  1097   000D8A  CFF5 F004          	movff	tablat,??_rotateMotorZ+1
  1098   000D8E  3A04               	swapf	(??_rotateMotorZ+1)^0,f,c
  1099   000D90  0EF0               	movlw	240
  1100   000D92  1604               	andwf	(??_rotateMotorZ+1)^0,f,c
  1101   000D94  508A               	movf	138,w,c	;volatile
  1102   000D96  0B0F               	andlw	15
  1103   000D98  1004               	iorwf	(??_rotateMotorZ+1)^0,w,c
  1104   000D9A  6E8A               	movwf	138,c	;volatile
  1105   000D9C                     
  1106                           ;../../src/main.c: 107:     rightSteps = 0;
  1107   000D9C  0E82               	movlw	130
  1108   000D9E  6E03               	movwf	??_rotateMotorZ^0,c
  1109   000DA0  0EDE               	movlw	222
  1110   000DA2                     u817:
  1111   000DA2  2EE8               	decfsz	wreg,f,c
  1112   000DA4  D7FE               	bra	u817
  1113   000DA6  2E03               	decfsz	??_rotateMotorZ^0,f,c
  1114   000DA8  D7FC               	bra	u817
  1115   000DAA                     
  1116                           ;../../src/main.c: 108:     leftSteps = 0;
  1117   000DAA  4A07               	infsnz	rotateMotorZ@i_213^0,f,c
  1118   000DAC  2A08               	incf	(rotateMotorZ@i_213+1)^0,f,c
  1119   000DAE  BE08               	btfsc	(rotateMotorZ@i_213+1)^0,7,c
  1120   000DB0  EFE3  F006         	goto	u441
  1121   000DB4  5008               	movf	(rotateMotorZ@i_213+1)^0,w,c
  1122   000DB6  E109               	bnz	u440
  1123   000DB8  0E04               	movlw	4
  1124   000DBA  5C07               	subwf	rotateMotorZ@i_213^0,w,c
  1125   000DBC  A0D8               	btfss	status,0,c
  1126   000DBE  EFE3  F006         	goto	u441
  1127   000DC2  EFE5  F006         	goto	u440
  1128   000DC6                     u441:
  1129   000DC6  EFBD  F006         	goto	l1136
  1130   000DCA                     u440:
  1131   000DCA  EFE9  F006         	goto	l79
  1132   000DCE                     l1144:
  1133                           
  1134                           ;../../src/main.c: 111:     while (!PORTCbits.RC0) {
  1135   000DCE  0E0F               	movlw	15
  1136   000DD0  168A               	andwf	138,f,c	;volatile
  1137   000DD2                     l79:
  1138   000DD2  0012               	return		;funcret
  1139   000DD4                     __end_of_rotateMotorZ:
  1140                           	callstack 0
  1141                           
  1142 ;; *************** function _calibrateMotorXY *****************
  1143 ;; Defined at:
  1144 ;;		line 115 in file "../../src/main.c"
  1145 ;; Parameters:    Size  Location     Type
  1146 ;;		None
  1147 ;; Auto vars:     Size  Location     Type
  1148 ;;  i               2   11[COMRAM] int 
  1149 ;;  i               2    9[COMRAM] int 
  1150 ;; Return value:  Size  Location     Type
  1151 ;;                  1    wreg      void 
  1152 ;; Registers used:
  1153 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1154 ;; Tracked objects:
  1155 ;;		On entry : 0/0
  1156 ;;		On exit  : 0/0
  1157 ;;		Unchanged: 0/0
  1158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1159 ;;      Params:         0       0       0       0       0       0       0       0       0
  1160 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1161 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1162 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1163 ;;Total ram usage:        5 bytes
  1164 ;; Hardware stack levels used: 1
  1165 ;; Hardware stack levels required when called: 1
  1166 ;; This function calls:
  1167 ;;		_rotateMotorXY
  1168 ;; This function is called by:
  1169 ;;		_setup
  1170 ;; This function uses a non-reentrant model
  1171 ;;
  1172                           
  1173                           	psect	text4
  1174   000C00                     __ptext4:
  1175                           	callstack 0
  1176   000C00                     _calibrateMotorXY:
  1177                           	callstack 28
  1178   000C00                     
  1179                           ;../../src/main.c: 116:         rotateMotorXY(2);
  1180   000C00  0E00               	movlw	0
  1181   000C02  6E1F               	movwf	(_rightSteps+1)^0,c
  1182   000C04  0E00               	movlw	0
  1183   000C06  6E1E               	movwf	_rightSteps^0,c
  1184                           
  1185                           ;../../src/main.c: 117:         _delay((unsigned long)((10)*(8000000/4000.0)));
  1186   000C08  0E00               	movlw	0
  1187   000C0A  6E1D               	movwf	(_leftSteps+1)^0,c
  1188   000C0C  0E00               	movlw	0
  1189   000C0E  6E1C               	movwf	_leftSteps^0,c
  1190                           
  1191                           ;../../src/main.c: 118:     }
  1192   000C10  0E00               	movlw	0
  1193   000C12  6E23               	movwf	(_positionXY+1)^0,c
  1194   000C14  0E00               	movlw	0
  1195   000C16  6E22               	movwf	_positionXY^0,c
  1196                           
  1197                           ;../../src/main.c: 120:         rotateMotorXY(2);
  1198   000C18  EF16  F006         	goto	l1152
  1199   000C1C                     l1148:
  1200                           
  1201                           ;../../src/main.c: 121:         leftSteps--;
  1202   000C1C  0E00               	movlw	0
  1203   000C1E  6E02               	movwf	(rotateMotorXY@direction+1)^0,c
  1204   000C20  0E01               	movlw	1
  1205   000C22  6E01               	movwf	rotateMotorXY@direction^0,c
  1206   000C24  ECEA  F006         	call	_rotateMotorXY	;wreg free
  1207   000C28                     
  1208                           ;../../src/main.c: 122:     }
  1209   000C28  4A1E               	infsnz	_rightSteps^0,f,c
  1210   000C2A  2A1F               	incf	(_rightSteps+1)^0,f,c
  1211   000C2C                     l1152:
  1212                           
  1213                           ;../../src/main.c: 120:         rotateMotorXY(2);
  1214   000C2C  A082               	btfss	130,0,c	;volatile
  1215   000C2E  EF1B  F006         	goto	u451
  1216   000C32  EF1D  F006         	goto	u450
  1217   000C36                     u451:
  1218   000C36  EF0E  F006         	goto	l1148
  1219   000C3A                     u450:
  1220   000C3A                     
  1221                           ;../../src/main.c: 124:         rotateMotorXY(1);
  1222   000C3A  0E00               	movlw	0
  1223   000C3C  6E0B               	movwf	(calibrateMotorXY@i+1)^0,c
  1224   000C3E  0E00               	movlw	0
  1225   000C40  6E0A               	movwf	calibrateMotorXY@i^0,c
  1226   000C42  EF33  F006         	goto	l1162
  1227   000C46                     l1156:
  1228                           
  1229                           ;../../src/main.c: 125:         _delay((unsigned long)((10)*(8000000/4000.0)));
  1230   000C46  0E00               	movlw	0
  1231   000C48  6E02               	movwf	(rotateMotorXY@direction+1)^0,c
  1232   000C4A  0E02               	movlw	2
  1233   000C4C  6E01               	movwf	rotateMotorXY@direction^0,c
  1234   000C4E  ECEA  F006         	call	_rotateMotorXY	;wreg free
  1235   000C52                     
  1236                           ;../../src/main.c: 126:     }
  1237   000C52  0E1A               	movlw	26
  1238   000C54  6E09               	movwf	??_calibrateMotorXY^0,c
  1239   000C56  0EF8               	movlw	248
  1240   000C58                     u827:
  1241   000C58  2EE8               	decfsz	wreg,f,c
  1242   000C5A  D7FE               	bra	u827
  1243   000C5C  2E09               	decfsz	??_calibrateMotorXY^0,f,c
  1244   000C5E  D7FC               	bra	u827
  1245   000C60  D000               	nop2	
  1246   000C62                     
  1247                           ;../../src/main.c: 127:     positionXY = 0;
  1248   000C62  4A0A               	infsnz	calibrateMotorXY@i^0,f,c
  1249   000C64  2A0B               	incf	(calibrateMotorXY@i+1)^0,f,c
  1250   000C66                     l1162:
  1251   000C66  501E               	movf	_rightSteps^0,w,c
  1252   000C68  5C0A               	subwf	calibrateMotorXY@i^0,w,c
  1253   000C6A  500B               	movf	(calibrateMotorXY@i+1)^0,w,c
  1254   000C6C  0A80               	xorlw	128
  1255   000C6E  6E09               	movwf	??_calibrateMotorXY^0,c
  1256   000C70  501F               	movf	(_rightSteps+1)^0,w,c
  1257   000C72  0A80               	xorlw	128
  1258   000C74  5809               	subwfb	??_calibrateMotorXY^0,w,c
  1259   000C76  A0D8               	btfss	status,0,c
  1260   000C78  EF40  F006         	goto	u461
  1261   000C7C  EF42  F006         	goto	u460
  1262   000C80                     u461:
  1263   000C80  EF23  F006         	goto	l1156
  1264   000C84                     u460:
  1265   000C84  EF4D  F006         	goto	l1168
  1266   000C88                     l1164:
  1267                           
  1268                           ;../../src/main.c: 129: 
  1269   000C88  0E00               	movlw	0
  1270   000C8A  6E02               	movwf	(rotateMotorXY@direction+1)^0,c
  1271   000C8C  0E02               	movlw	2
  1272   000C8E  6E01               	movwf	rotateMotorXY@direction^0,c
  1273   000C90  ECEA  F006         	call	_rotateMotorXY	;wreg free
  1274   000C94                     
  1275                           ;../../src/main.c: 130: void calibrateMotorZ() {
  1276   000C94  061C               	decf	_leftSteps^0,f,c
  1277   000C96  A0D8               	btfss	status,0,c
  1278   000C98  061D               	decf	(_leftSteps+1)^0,f,c
  1279   000C9A                     l1168:
  1280                           
  1281                           ;../../src/main.c: 128: }
  1282   000C9A  A282               	btfss	130,1,c	;volatile
  1283   000C9C  EF52  F006         	goto	u471
  1284   000CA0  EF54  F006         	goto	u470
  1285   000CA4                     u471:
  1286   000CA4  EF44  F006         	goto	l1164
  1287   000CA8                     u470:
  1288   000CA8                     
  1289                           ;../../src/main.c: 132:     downSteps = 0;
  1290   000CA8  C01C  F00C         	movff	_leftSteps,calibrateMotorXY@i_225
  1291   000CAC  C01D  F00D         	movff	_leftSteps+1,calibrateMotorXY@i_225+1
  1292   000CB0                     l1170:
  1293   000CB0  BE0D               	btfsc	(calibrateMotorXY@i_225+1)^0,7,c
  1294   000CB2  EF5D  F006         	goto	u481
  1295   000CB6  EF5F  F006         	goto	u480
  1296   000CBA                     u481:
  1297   000CBA  EF61  F006         	goto	l1174
  1298   000CBE                     u480:
  1299   000CBE  EF73  F006         	goto	l1182
  1300   000CC2                     l1174:
  1301                           
  1302                           ;../../src/main.c: 133:     positionZ = 0;
  1303   000CC2  0E00               	movlw	0
  1304   000CC4  6E02               	movwf	(rotateMotorXY@direction+1)^0,c
  1305   000CC6  0E01               	movlw	1
  1306   000CC8  6E01               	movwf	rotateMotorXY@direction^0,c
  1307   000CCA  ECEA  F006         	call	_rotateMotorXY	;wreg free
  1308   000CCE                     
  1309                           ;../../src/main.c: 134: 
  1310   000CCE  0E1A               	movlw	26
  1311   000CD0  6E09               	movwf	??_calibrateMotorXY^0,c
  1312   000CD2  0EF8               	movlw	248
  1313   000CD4                     u837:
  1314   000CD4  2EE8               	decfsz	wreg,f,c
  1315   000CD6  D7FE               	bra	u837
  1316   000CD8  2E09               	decfsz	??_calibrateMotorXY^0,f,c
  1317   000CDA  D7FC               	bra	u837
  1318   000CDC  D000               	nop2	
  1319   000CDE                     
  1320                           ;../../src/main.c: 135:     while (!PORTCbits.RC4) {
  1321   000CDE  4A0C               	infsnz	calibrateMotorXY@i_225^0,f,c
  1322   000CE0  2A0D               	incf	(calibrateMotorXY@i_225+1)^0,f,c
  1323   000CE2  EF58  F006         	goto	l1170
  1324   000CE6                     l1182:
  1325                           
  1326                           ;../../src/main.c: 136:         rotateMotorZ(1);
  1327   000CE6  0E00               	movlw	0
  1328   000CE8  6E23               	movwf	(_positionXY+1)^0,c
  1329   000CEA  0E00               	movlw	0
  1330   000CEC  6E22               	movwf	_positionXY^0,c
  1331   000CEE  0012               	return		;funcret
  1332   000CF0                     __end_of_calibrateMotorXY:
  1333                           	callstack 0
  1334                           
  1335 ;; *************** function _rotateMotorXY *****************
  1336 ;; Defined at:
  1337 ;;		line 75 in file "../../src/main.c"
  1338 ;; Parameters:    Size  Location     Type
  1339 ;;  direction       2    0[COMRAM] int 
  1340 ;; Auto vars:     Size  Location     Type
  1341 ;;  i               2    6[COMRAM] int 
  1342 ;;  i               2    4[COMRAM] int 
  1343 ;; Return value:  Size  Location     Type
  1344 ;;                  1    wreg      void 
  1345 ;; Registers used:
  1346 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  1347 ;; Tracked objects:
  1348 ;;		On entry : 0/0
  1349 ;;		On exit  : 0/0
  1350 ;;		Unchanged: 0/0
  1351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1352 ;;      Params:         2       0       0       0       0       0       0       0       0
  1353 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1354 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1355 ;;      Totals:         8       0       0       0       0       0       0       0       0
  1356 ;;Total ram usage:        8 bytes
  1357 ;; Hardware stack levels used: 1
  1358 ;; This function calls:
  1359 ;;		Nothing
  1360 ;; This function is called by:
  1361 ;;		_calibrateMotorXY
  1362 ;;		_main
  1363 ;; This function uses a non-reentrant model
  1364 ;;
  1365                           
  1366                           	psect	text5
  1367   000DD4                     __ptext5:
  1368                           	callstack 0
  1369   000DD4                     _rotateMotorXY:
  1370                           	callstack 28
  1371   000DD4                     
  1372                           ;../../src/main.c: 76:         for (int i = 0; i < 4; i++) {
  1373   000DD4  0401               	decf	rotateMotorXY@direction^0,w,c
  1374   000DD6  1002               	iorwf	(rotateMotorXY@direction+1)^0,w,c
  1375   000DD8  A4D8               	btfss	status,2,c
  1376   000DDA  EFF1  F006         	goto	u371
  1377   000DDE  EFF3  F006         	goto	u370
  1378   000DE2                     u371:
  1379   000DE2  EF1E  F007         	goto	l1094
  1380   000DE6                     u370:
  1381   000DE6                     
  1382                           ;../../src/main.c: 78:             _delay((unsigned long)((50)*(8000000/4000.0)));
  1383   000DE6  0E00               	movlw	0
  1384   000DE8  6E06               	movwf	(rotateMotorXY@i+1)^0,c
  1385   000DEA  0E00               	movlw	0
  1386   000DEC  6E05               	movwf	rotateMotorXY@i^0,c
  1387   000DEE                     l1086:
  1388                           
  1389                           ;../../src/main.c: 79:         }
  1390   000DEE  5005               	movf	rotateMotorXY@i^0,w,c
  1391   000DF0  0F05               	addlw	low _steps_cw
  1392   000DF2  6E03               	movwf	??_rotateMotorXY^0,c
  1393   000DF4  C003  FFF6         	movff	??_rotateMotorXY,tblptrl
  1394   000DF8                     	if	1	;There is more than 1 active tblptr byte
  1395   000DF8  0E08               	movlw	high __smallconst
  1396   000DFA  6EF7               	movwf	tblptrh,c
  1397   000DFC                     	endif
  1398   000DFC                     	if	0	;tblptru may be non-zero
  1399   000DFC                     	endif
  1400   000DFC                     	if	0	;tblptru may be non-zero
  1401   000DFC                     	endif
  1402   000DFC  0008               	tblrd		*
  1403   000DFE  CFF5 F004          	movff	tablat,??_rotateMotorXY+1
  1404   000E02  508A               	movf	138,w,c	;volatile
  1405   000E04  0BF0               	andlw	240
  1406   000E06  1004               	iorwf	(??_rotateMotorXY+1)^0,w,c
  1407   000E08  6E8A               	movwf	138,c	;volatile
  1408   000E0A                     
  1409                           ;../../src/main.c: 80:     }
  1410   000E0A  0E82               	movlw	130
  1411   000E0C  6E03               	movwf	??_rotateMotorXY^0,c
  1412   000E0E  0EDE               	movlw	222
  1413   000E10                     u847:
  1414   000E10  2EE8               	decfsz	wreg,f,c
  1415   000E12  D7FE               	bra	u847
  1416   000E14  2E03               	decfsz	??_rotateMotorXY^0,f,c
  1417   000E16  D7FC               	bra	u847
  1418   000E18                     
  1419                           ;../../src/main.c: 81:     else {
  1420   000E18  4A05               	infsnz	rotateMotorXY@i^0,f,c
  1421   000E1A  2A06               	incf	(rotateMotorXY@i+1)^0,f,c
  1422   000E1C  BE06               	btfsc	(rotateMotorXY@i+1)^0,7,c
  1423   000E1E  EF1A  F007         	goto	u381
  1424   000E22  5006               	movf	(rotateMotorXY@i+1)^0,w,c
  1425   000E24  E109               	bnz	u380
  1426   000E26  0E04               	movlw	4
  1427   000E28  5C05               	subwf	rotateMotorXY@i^0,w,c
  1428   000E2A  A0D8               	btfss	status,0,c
  1429   000E2C  EF1A  F007         	goto	u381
  1430   000E30  EF1C  F007         	goto	u380
  1431   000E34                     u381:
  1432   000E34  EFF7  F006         	goto	l1086
  1433   000E38                     u380:
  1434   000E38  EF55  F007         	goto	l68
  1435   000E3C                     l1094:
  1436   000E3C  0E02               	movlw	2
  1437   000E3E  1801               	xorwf	rotateMotorXY@direction^0,w,c
  1438   000E40  1002               	iorwf	(rotateMotorXY@direction+1)^0,w,c
  1439   000E42  A4D8               	btfss	status,2,c
  1440   000E44  EF26  F007         	goto	u391
  1441   000E48  EF28  F007         	goto	u390
  1442   000E4C                     u391:
  1443   000E4C  EF53  F007         	goto	l1110
  1444   000E50                     u390:
  1445   000E50                     
  1446                           ;../../src/main.c: 85: 
  1447   000E50  0E00               	movlw	0
  1448   000E52  6E08               	movwf	(rotateMotorXY@i_209+1)^0,c
  1449   000E54  0E00               	movlw	0
  1450   000E56  6E07               	movwf	rotateMotorXY@i_209^0,c
  1451   000E58                     l1102:
  1452                           
  1453                           ;../../src/main.c: 86: void rotateMotorZ(int direction) {
  1454   000E58  5007               	movf	rotateMotorXY@i_209^0,w,c
  1455   000E5A  0F01               	addlw	low _steps_ccw
  1456   000E5C  6E03               	movwf	??_rotateMotorXY^0,c
  1457   000E5E  C003  FFF6         	movff	??_rotateMotorXY,tblptrl
  1458   000E62                     	if	1	;There is more than 1 active tblptr byte
  1459   000E62  0E08               	movlw	high __smallconst
  1460   000E64  6EF7               	movwf	tblptrh,c
  1461   000E66                     	endif
  1462   000E66                     	if	0	;tblptru may be non-zero
  1463   000E66                     	endif
  1464   000E66                     	if	0	;tblptru may be non-zero
  1465   000E66                     	endif
  1466   000E66  0008               	tblrd		*
  1467   000E68  CFF5 F004          	movff	tablat,??_rotateMotorXY+1
  1468   000E6C  508A               	movf	138,w,c	;volatile
  1469   000E6E  0BF0               	andlw	240
  1470   000E70  1004               	iorwf	(??_rotateMotorXY+1)^0,w,c
  1471   000E72  6E8A               	movwf	138,c	;volatile
  1472   000E74                     
  1473                           ;../../src/main.c: 87:     if (direction == 1) {
  1474   000E74  0E82               	movlw	130
  1475   000E76  6E03               	movwf	??_rotateMotorXY^0,c
  1476   000E78  0EDE               	movlw	222
  1477   000E7A                     u857:
  1478   000E7A  2EE8               	decfsz	wreg,f,c
  1479   000E7C  D7FE               	bra	u857
  1480   000E7E  2E03               	decfsz	??_rotateMotorXY^0,f,c
  1481   000E80  D7FC               	bra	u857
  1482   000E82                     
  1483                           ;../../src/main.c: 88: 
  1484   000E82  4A07               	infsnz	rotateMotorXY@i_209^0,f,c
  1485   000E84  2A08               	incf	(rotateMotorXY@i_209+1)^0,f,c
  1486   000E86  BE08               	btfsc	(rotateMotorXY@i_209+1)^0,7,c
  1487   000E88  EF4F  F007         	goto	u401
  1488   000E8C  5008               	movf	(rotateMotorXY@i_209+1)^0,w,c
  1489   000E8E  E109               	bnz	u400
  1490   000E90  0E04               	movlw	4
  1491   000E92  5C07               	subwf	rotateMotorXY@i_209^0,w,c
  1492   000E94  A0D8               	btfss	status,0,c
  1493   000E96  EF4F  F007         	goto	u401
  1494   000E9A  EF51  F007         	goto	u400
  1495   000E9E                     u401:
  1496   000E9E  EF2C  F007         	goto	l1102
  1497   000EA2                     u400:
  1498   000EA2  EF55  F007         	goto	l68
  1499   000EA6                     l1110:
  1500                           
  1501                           ;../../src/main.c: 91:             _delay((unsigned long)((50)*(8000000/4000.0)));
  1502   000EA6  0EF0               	movlw	240
  1503   000EA8  168A               	andwf	138,f,c	;volatile
  1504   000EAA                     l68:
  1505   000EAA  0012               	return		;funcret
  1506   000EAC                     __end_of_rotateMotorXY:
  1507                           	callstack 0
  1508                           
  1509 ;; *************** function _checkAllBtns *****************
  1510 ;; Defined at:
  1511 ;;		line 27 in file "../../src/main.c"
  1512 ;; Parameters:    Size  Location     Type
  1513 ;;  rtn             1    0[COMRAM] PTR int 
  1514 ;;		 -> main@direction(4), 
  1515 ;; Auto vars:     Size  Location     Type
  1516 ;;  select          1    6[COMRAM] unsigned char 
  1517 ;; Return value:  Size  Location     Type
  1518 ;;                  1    wreg      void 
  1519 ;; Registers used:
  1520 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1521 ;; Tracked objects:
  1522 ;;		On entry : 0/0
  1523 ;;		On exit  : 0/0
  1524 ;;		Unchanged: 0/0
  1525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1526 ;;      Params:         1       0       0       0       0       0       0       0       0
  1527 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1528 ;;      Temps:          5       0       0       0       0       0       0       0       0
  1529 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1530 ;;Total ram usage:        7 bytes
  1531 ;; Hardware stack levels used: 1
  1532 ;; This function calls:
  1533 ;;		Nothing
  1534 ;; This function is called by:
  1535 ;;		_main
  1536 ;; This function uses a non-reentrant model
  1537 ;;
  1538                           
  1539                           	psect	text6
  1540   00080A                     __ptext6:
  1541                           	callstack 0
  1542   00080A                     _checkAllBtns:
  1543                           	callstack 30
  1544   00080A                     
  1545                           ;../../src/main.c: 28:             rtn[0] = 0;
  1546   00080A  B483               	btfsc	131,2,c	;volatile
  1547   00080C  EF0A  F004         	goto	u531
  1548   000810  EF0C  F004         	goto	u530
  1549   000814                     u531:
  1550   000814  EF13  F004         	goto	l45
  1551   000818                     u530:
  1552   000818  A683               	btfss	131,3,c	;volatile
  1553   00081A  EF11  F004         	goto	u541
  1554   00081E  EF13  F004         	goto	u540
  1555   000822                     u541:
  1556   000822  EF21  F004         	goto	l1228
  1557   000826                     u540:
  1558   000826                     l45:
  1559   000826  B083               	btfsc	131,0,c	;volatile
  1560   000828  EF18  F004         	goto	u551
  1561   00082C  EF1A  F004         	goto	u550
  1562   000830                     u551:
  1563   000830  EF2F  F004         	goto	l1234
  1564   000834                     u550:
  1565   000834  B283               	btfsc	131,1,c	;volatile
  1566   000836  EF1F  F004         	goto	u561
  1567   00083A  EF21  F004         	goto	u560
  1568   00083E                     u561:
  1569   00083E  EF2F  F004         	goto	l1234
  1570   000842                     u560:
  1571   000842                     l1228:
  1572                           
  1573                           ;../../src/main.c: 29:             rtn[1] = 1;
  1574   000842  5001               	movf	checkAllBtns@rtn^0,w,c
  1575   000844  6ED9               	movwf	fsr2l,c
  1576   000846  6ADA               	clrf	fsr2h,c
  1577   000848  6ADE               	clrf	postinc2,c
  1578   00084A  6ADD               	clrf	postdec2,c
  1579   00084C                     l1230:
  1580                           
  1581                           ;../../src/main.c: 30:             break;
  1582   00084C  5001               	movf	checkAllBtns@rtn^0,w,c
  1583   00084E  6ED9               	movwf	fsr2l,c
  1584   000850  6ADA               	clrf	fsr2h,c
  1585   000852  0E02               	movlw	2
  1586   000854  26D9               	addwf	fsr2l,f,c
  1587   000856  6ADE               	clrf	postinc2,c
  1588   000858  6ADD               	clrf	postdec2,c
  1589   00085A  EFE3  F004         	goto	l46
  1590   00085E                     l1234:
  1591                           
  1592                           ;../../src/main.c: 34:             break;
  1593   00085E  A083               	btfss	131,0,c	;volatile
  1594   000860  EF34  F004         	goto	u571
  1595   000864  EF38  F004         	goto	u570
  1596   000868                     u571:
  1597   000868  6A02               	clrf	??_checkAllBtns^0,c
  1598   00086A  2A02               	incf	??_checkAllBtns^0,f,c
  1599   00086C  EF39  F004         	goto	u588
  1600   000870                     u570:
  1601   000870  6A02               	clrf	??_checkAllBtns^0,c
  1602   000872                     u588:
  1603   000872  A283               	btfss	131,1,c	;volatile
  1604   000874  EF3E  F004         	goto	u591
  1605   000878  EF42  F004         	goto	u590
  1606   00087C                     u591:
  1607   00087C  6A03               	clrf	(??_checkAllBtns+1)^0,c
  1608   00087E  2A03               	incf	(??_checkAllBtns+1)^0,f,c
  1609   000880  EF43  F004         	goto	u608
  1610   000884                     u590:
  1611   000884  6A03               	clrf	(??_checkAllBtns+1)^0,c
  1612   000886                     u608:
  1613   000886  90D8               	bcf	status,0,c
  1614   000888  3403               	rlcf	(??_checkAllBtns+1)^0,w,c
  1615   00088A  6E04               	movwf	(??_checkAllBtns+2)^0,c
  1616   00088C  A683               	btfss	131,3,c	;volatile
  1617   00088E  EF4B  F004         	goto	u611
  1618   000892  EF4F  F004         	goto	u610
  1619   000896                     u611:
  1620   000896  6A05               	clrf	(??_checkAllBtns+3)^0,c
  1621   000898  2A05               	incf	(??_checkAllBtns+3)^0,f,c
  1622   00089A  EF50  F004         	goto	u628
  1623   00089E                     u610:
  1624   00089E  6A05               	clrf	(??_checkAllBtns+3)^0,c
  1625   0008A0                     u628:
  1626   0008A0  90D8               	bcf	status,0,c
  1627   0008A2  3605               	rlcf	(??_checkAllBtns+3)^0,f,c
  1628   0008A4  90D8               	bcf	status,0,c
  1629   0008A6  3605               	rlcf	(??_checkAllBtns+3)^0,f,c
  1630   0008A8  A483               	btfss	131,2,c	;volatile
  1631   0008AA  EF59  F004         	goto	u631
  1632   0008AE  EF5D  F004         	goto	u630
  1633   0008B2                     u631:
  1634   0008B2  6A06               	clrf	(??_checkAllBtns+4)^0,c
  1635   0008B4  2A06               	incf	(??_checkAllBtns+4)^0,f,c
  1636   0008B6  EF5E  F004         	goto	u648
  1637   0008BA                     u630:
  1638   0008BA  6A06               	clrf	(??_checkAllBtns+4)^0,c
  1639   0008BC                     u648:
  1640   0008BC  90D8               	bcf	status,0,c
  1641   0008BE  3606               	rlcf	(??_checkAllBtns+4)^0,f,c
  1642   0008C0  90D8               	bcf	status,0,c
  1643   0008C2  3606               	rlcf	(??_checkAllBtns+4)^0,f,c
  1644   0008C4  90D8               	bcf	status,0,c
  1645   0008C6  3406               	rlcf	(??_checkAllBtns+4)^0,w,c
  1646   0008C8  1005               	iorwf	(??_checkAllBtns+3)^0,w,c
  1647   0008CA  1004               	iorwf	(??_checkAllBtns+2)^0,w,c
  1648   0008CC  1002               	iorwf	??_checkAllBtns^0,w,c
  1649   0008CE  6E07               	movwf	checkAllBtns@select^0,c
  1650                           
  1651                           ;../../src/main.c: 35:         case 0b0100:
  1652   0008D0  EFC0  F004         	goto	l1274
  1653   0008D4                     l1236:
  1654                           
  1655                           ;../../src/main.c: 37:             rtn[1] = 0;
  1656   0008D4  5001               	movf	checkAllBtns@rtn^0,w,c
  1657   0008D6  6ED9               	movwf	fsr2l,c
  1658   0008D8  6ADA               	clrf	fsr2h,c
  1659   0008DA  6ADE               	clrf	postinc2,c
  1660   0008DC  6ADD               	clrf	postdec2,c
  1661   0008DE                     l1238:
  1662                           
  1663                           ;../../src/main.c: 38:             break;
  1664   0008DE  5001               	movf	checkAllBtns@rtn^0,w,c
  1665   0008E0  6ED9               	movwf	fsr2l,c
  1666   0008E2  6ADA               	clrf	fsr2h,c
  1667   0008E4  0E02               	movlw	2
  1668   0008E6  26D9               	addwf	fsr2l,f,c
  1669   0008E8  0E01               	movlw	1
  1670   0008EA  6EDE               	movwf	postinc2,c
  1671   0008EC  0E00               	movlw	0
  1672   0008EE  6EDD               	movwf	postdec2,c
  1673                           
  1674                           ;../../src/main.c: 39:         case 0b1000:
  1675   0008F0  EFE3  F004         	goto	l46
  1676   0008F4                     l1240:
  1677                           
  1678                           ;../../src/main.c: 41:             rtn[1] = 0;
  1679   0008F4  5001               	movf	checkAllBtns@rtn^0,w,c
  1680   0008F6  6ED9               	movwf	fsr2l,c
  1681   0008F8  6ADA               	clrf	fsr2h,c
  1682   0008FA  6ADE               	clrf	postinc2,c
  1683   0008FC  6ADD               	clrf	postdec2,c
  1684   0008FE                     l1242:
  1685                           
  1686                           ;../../src/main.c: 42:             break;
  1687   0008FE  5001               	movf	checkAllBtns@rtn^0,w,c
  1688   000900  6ED9               	movwf	fsr2l,c
  1689   000902  6ADA               	clrf	fsr2h,c
  1690   000904  0E02               	movlw	2
  1691   000906  26D9               	addwf	fsr2l,f,c
  1692   000908  0E02               	movlw	2
  1693   00090A  6EDE               	movwf	postinc2,c
  1694   00090C  0E00               	movlw	0
  1695   00090E  6EDD               	movwf	postdec2,c
  1696                           
  1697                           ;../../src/main.c: 43:         case 0b1010:
  1698   000910  EFE3  F004         	goto	l46
  1699   000914                     l1244:
  1700                           
  1701                           ;../../src/main.c: 45:             rtn[1] = 2;
  1702   000914  5001               	movf	checkAllBtns@rtn^0,w,c
  1703   000916  6ED9               	movwf	fsr2l,c
  1704   000918  6ADA               	clrf	fsr2h,c
  1705   00091A  0E01               	movlw	1
  1706   00091C  6EDE               	movwf	postinc2,c
  1707   00091E  0E00               	movlw	0
  1708   000920  6EDD               	movwf	postdec2,c
  1709   000922  EF26  F004         	goto	l1230
  1710   000926                     l1248:
  1711                           
  1712                           ;../../src/main.c: 49:             rtn[1] = 1;
  1713   000926  5001               	movf	checkAllBtns@rtn^0,w,c
  1714   000928  6ED9               	movwf	fsr2l,c
  1715   00092A  6ADA               	clrf	fsr2h,c
  1716   00092C  0E02               	movlw	2
  1717   00092E  6EDE               	movwf	postinc2,c
  1718   000930  0E00               	movlw	0
  1719   000932  6EDD               	movwf	postdec2,c
  1720   000934  EF26  F004         	goto	l1230
  1721   000938                     l1252:
  1722                           
  1723                           ;../../src/main.c: 53:             rtn[1] = 2;
  1724   000938  5001               	movf	checkAllBtns@rtn^0,w,c
  1725   00093A  6ED9               	movwf	fsr2l,c
  1726   00093C  6ADA               	clrf	fsr2h,c
  1727   00093E  0E02               	movlw	2
  1728   000940  6EDE               	movwf	postinc2,c
  1729   000942  0E00               	movlw	0
  1730   000944  6EDD               	movwf	postdec2,c
  1731   000946  EF7F  F004         	goto	l1242
  1732   00094A                     l1256:
  1733                           
  1734                           ;../../src/main.c: 57:             rtn[1] = 1;
  1735   00094A  5001               	movf	checkAllBtns@rtn^0,w,c
  1736   00094C  6ED9               	movwf	fsr2l,c
  1737   00094E  6ADA               	clrf	fsr2h,c
  1738   000950  0E02               	movlw	2
  1739   000952  6EDE               	movwf	postinc2,c
  1740   000954  0E00               	movlw	0
  1741   000956  6EDD               	movwf	postdec2,c
  1742   000958  EF6F  F004         	goto	l1238
  1743   00095C                     l1260:
  1744                           
  1745                           ;../../src/main.c: 61:             rtn[1] = 0;
  1746   00095C  5001               	movf	checkAllBtns@rtn^0,w,c
  1747   00095E  6ED9               	movwf	fsr2l,c
  1748   000960  6ADA               	clrf	fsr2h,c
  1749   000962  0E01               	movlw	1
  1750   000964  6EDE               	movwf	postinc2,c
  1751   000966  0E00               	movlw	0
  1752   000968  6EDD               	movwf	postdec2,c
  1753   00096A  EF7F  F004         	goto	l1242
  1754   00096E                     l1264:
  1755                           
  1756                           ;../../src/main.c: 65: 
  1757   00096E  5001               	movf	checkAllBtns@rtn^0,w,c
  1758   000970  6ED9               	movwf	fsr2l,c
  1759   000972  6ADA               	clrf	fsr2h,c
  1760   000974  0E01               	movlw	1
  1761   000976  6EDE               	movwf	postinc2,c
  1762   000978  0E00               	movlw	0
  1763   00097A  6EDD               	movwf	postdec2,c
  1764   00097C  EF6F  F004         	goto	l1238
  1765   000980                     l1274:
  1766   000980  5007               	movf	checkAllBtns@select^0,w,c
  1767                           
  1768                           ; Switch size 1, requested type "simple"
  1769                           ; Number of cases is 8, Range of values is 1 to 10
  1770                           ; switch strategies available:
  1771                           ; Name         Instructions Cycles
  1772                           ; simple_byte           25    13 (average)
  1773                           ;	Chosen strategy is simple_byte
  1774   000982  0A01               	xorlw	1	; case 1
  1775   000984  B4D8               	btfsc	status,2,c
  1776   000986  EF6A  F004         	goto	l1236
  1777   00098A  0A03               	xorlw	3	; case 2
  1778   00098C  B4D8               	btfsc	status,2,c
  1779   00098E  EF7A  F004         	goto	l1240
  1780   000992  0A06               	xorlw	6	; case 4
  1781   000994  B4D8               	btfsc	status,2,c
  1782   000996  EF8A  F004         	goto	l1244
  1783   00099A  0A01               	xorlw	1	; case 5
  1784   00099C  B4D8               	btfsc	status,2,c
  1785   00099E  EFB7  F004         	goto	l1264
  1786   0009A2  0A03               	xorlw	3	; case 6
  1787   0009A4  B4D8               	btfsc	status,2,c
  1788   0009A6  EFAE  F004         	goto	l1260
  1789   0009AA  0A0E               	xorlw	14	; case 8
  1790   0009AC  B4D8               	btfsc	status,2,c
  1791   0009AE  EF93  F004         	goto	l1248
  1792   0009B2  0A01               	xorlw	1	; case 9
  1793   0009B4  B4D8               	btfsc	status,2,c
  1794   0009B6  EFA5  F004         	goto	l1256
  1795   0009BA  0A03               	xorlw	3	; case 10
  1796   0009BC  B4D8               	btfsc	status,2,c
  1797   0009BE  EF9C  F004         	goto	l1252
  1798   0009C2  EF21  F004         	goto	l1228
  1799   0009C6                     l46:
  1800   0009C6  0012               	return		;funcret
  1801   0009C8                     __end_of_checkAllBtns:
  1802                           	callstack 0
  1803                           
  1804                           	psect	rparam
  1805   000001                     ___rparam_used  equ	1
  1806   000000                     ___param_bank   equ	0
  1807   000000                     __Lparam        equ	__Lrparam
  1808   000000                     __Hparam        equ	__Hrparam
  1809                           
  1810                           	psect	idloc
  1811                           
  1812                           ;Config register IDLOC0 @ 0x200000
  1813                           ;	unspecified, using default values
  1814   200000                     	org	2097152
  1815   200000  FF                 	db	255
  1816                           
  1817                           ;Config register IDLOC1 @ 0x200001
  1818                           ;	unspecified, using default values
  1819   200001                     	org	2097153
  1820   200001  FF                 	db	255
  1821                           
  1822                           ;Config register IDLOC2 @ 0x200002
  1823                           ;	unspecified, using default values
  1824   200002                     	org	2097154
  1825   200002  FF                 	db	255
  1826                           
  1827                           ;Config register IDLOC3 @ 0x200003
  1828                           ;	unspecified, using default values
  1829   200003                     	org	2097155
  1830   200003  FF                 	db	255
  1831                           
  1832                           ;Config register IDLOC4 @ 0x200004
  1833                           ;	unspecified, using default values
  1834   200004                     	org	2097156
  1835   200004  FF                 	db	255
  1836                           
  1837                           ;Config register IDLOC5 @ 0x200005
  1838                           ;	unspecified, using default values
  1839   200005                     	org	2097157
  1840   200005  FF                 	db	255
  1841                           
  1842                           ;Config register IDLOC6 @ 0x200006
  1843                           ;	unspecified, using default values
  1844   200006                     	org	2097158
  1845   200006  FF                 	db	255
  1846                           
  1847                           ;Config register IDLOC7 @ 0x200007
  1848                           ;	unspecified, using default values
  1849   200007                     	org	2097159
  1850   200007  FF                 	db	255
  1851                           
  1852                           	psect	config
  1853                           
  1854                           ;Config register CONFIG1L @ 0x300000
  1855                           ;	unspecified, using default values
  1856                           ;	PLL Prescaler Selection bits
  1857                           ;	PLLDIV = 0x0, unprogrammed default
  1858                           ;	System Clock Postscaler Selection bits
  1859                           ;	CPUDIV = 0x0, unprogrammed default
  1860                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  1861                           ;	USBDIV = 0x0, unprogrammed default
  1862   300000                     	org	3145728
  1863   300000  00                 	db	0
  1864                           
  1865                           ;Config register CONFIG1H @ 0x300001
  1866                           ;	Oscillator Selection bits
  1867                           ;	FOSC = INTOSCIO_EC, Internal oscillator, port function on RA6, EC used by USB (INTIO)
  1868                           ;	Fail-Safe Clock Monitor Enable bit
  1869                           ;	FCMEN = 0x0, unprogrammed default
  1870                           ;	Internal/External Oscillator Switchover bit
  1871                           ;	IESO = 0x0, unprogrammed default
  1872   300001                     	org	3145729
  1873   300001  08                 	db	8
  1874                           
  1875                           ;Config register CONFIG2L @ 0x300002
  1876                           ;	unspecified, using default values
  1877                           ;	Power-up Timer Enable bit
  1878                           ;	PWRT = 0x1, unprogrammed default
  1879                           ;	Brown-out Reset Enable bits
  1880                           ;	BOR = 0x3, unprogrammed default
  1881                           ;	Brown-out Reset Voltage bits
  1882                           ;	BORV = 0x3, unprogrammed default
  1883                           ;	USB Voltage Regulator Enable bit
  1884                           ;	VREGEN = 0x0, unprogrammed default
  1885   300002                     	org	3145730
  1886   300002  1F                 	db	31
  1887                           
  1888                           ;Config register CONFIG2H @ 0x300003
  1889                           ;	Watchdog Timer Enable bit
  1890                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1891                           ;	Watchdog Timer Postscale Select bits
  1892                           ;	WDTPS = 0xF, unprogrammed default
  1893   300003                     	org	3145731
  1894   300003  1E                 	db	30
  1895                           
  1896                           ; Padding undefined space
  1897   300004                     	org	3145732
  1898   300004  FF                 	db	255
  1899                           
  1900                           ;Config register CONFIG3H @ 0x300005
  1901                           ;	CCP2 MUX bit
  1902                           ;	CCP2MX = 0x1, unprogrammed default
  1903                           ;	PORTB A/D Enable bit
  1904                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  1905                           ;	Low-Power Timer 1 Oscillator Enable bit
  1906                           ;	LPT1OSC = 0x0, unprogrammed default
  1907                           ;	MCLR Pin Enable bit
  1908                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  1909   300005                     	org	3145733
  1910   300005  81                 	db	129
  1911                           
  1912                           ;Config register CONFIG4L @ 0x300006
  1913                           ;	Stack Full/Underflow Reset Enable bit
  1914                           ;	STVREN = 0x1, unprogrammed default
  1915                           ;	Single-Supply ICSP Enable bit
  1916                           ;	LVP = OFF, Single-Supply ICSP disabled
  1917                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  1918                           ;	ICPRT = 0x0, unprogrammed default
  1919                           ;	Extended Instruction Set Enable bit
  1920                           ;	XINST = 0x0, unprogrammed default
  1921                           ;	Background Debugger Enable bit
  1922                           ;	DEBUG = 0x1, unprogrammed default
  1923   300006                     	org	3145734
  1924   300006  81                 	db	129
  1925                           
  1926                           ; Padding undefined space
  1927   300007                     	org	3145735
  1928   300007  FF                 	db	255
  1929                           
  1930                           ;Config register CONFIG5L @ 0x300008
  1931                           ;	unspecified, using default values
  1932                           ;	Code Protection bit
  1933                           ;	CP0 = 0x1, unprogrammed default
  1934                           ;	Code Protection bit
  1935                           ;	CP1 = 0x1, unprogrammed default
  1936                           ;	Code Protection bit
  1937                           ;	CP2 = 0x1, unprogrammed default
  1938                           ;	Code Protection bit
  1939                           ;	CP3 = 0x1, unprogrammed default
  1940   300008                     	org	3145736
  1941   300008  0F                 	db	15
  1942                           
  1943                           ;Config register CONFIG5H @ 0x300009
  1944                           ;	unspecified, using default values
  1945                           ;	Boot Block Code Protection bit
  1946                           ;	CPB = 0x1, unprogrammed default
  1947                           ;	Data EEPROM Code Protection bit
  1948                           ;	CPD = 0x1, unprogrammed default
  1949   300009                     	org	3145737
  1950   300009  C0                 	db	192
  1951                           
  1952                           ;Config register CONFIG6L @ 0x30000A
  1953                           ;	unspecified, using default values
  1954                           ;	Write Protection bit
  1955                           ;	WRT0 = 0x1, unprogrammed default
  1956                           ;	Write Protection bit
  1957                           ;	WRT1 = 0x1, unprogrammed default
  1958                           ;	Write Protection bit
  1959                           ;	WRT2 = 0x1, unprogrammed default
  1960                           ;	Write Protection bit
  1961                           ;	WRT3 = 0x1, unprogrammed default
  1962   30000A                     	org	3145738
  1963   30000A  0F                 	db	15
  1964                           
  1965                           ;Config register CONFIG6H @ 0x30000B
  1966                           ;	unspecified, using default values
  1967                           ;	Configuration Register Write Protection bit
  1968                           ;	WRTC = 0x1, unprogrammed default
  1969                           ;	Boot Block Write Protection bit
  1970                           ;	WRTB = 0x1, unprogrammed default
  1971                           ;	Data EEPROM Write Protection bit
  1972                           ;	WRTD = 0x1, unprogrammed default
  1973   30000B                     	org	3145739
  1974   30000B  E0                 	db	224
  1975                           
  1976                           ;Config register CONFIG7L @ 0x30000C
  1977                           ;	unspecified, using default values
  1978                           ;	Table Read Protection bit
  1979                           ;	EBTR0 = 0x1, unprogrammed default
  1980                           ;	Table Read Protection bit
  1981                           ;	EBTR1 = 0x1, unprogrammed default
  1982                           ;	Table Read Protection bit
  1983                           ;	EBTR2 = 0x1, unprogrammed default
  1984                           ;	Table Read Protection bit
  1985                           ;	EBTR3 = 0x1, unprogrammed default
  1986   30000C                     	org	3145740
  1987   30000C  0F                 	db	15
  1988                           
  1989                           ;Config register CONFIG7H @ 0x30000D
  1990                           ;	unspecified, using default values
  1991                           ;	Boot Block Table Read Protection bit
  1992                           ;	EBTRB = 0x1, unprogrammed default
  1993   30000D                     	org	3145741
  1994   30000D  40                 	db	64
  1995                           tosu	equ	0xFFF
  1996                           tosh	equ	0xFFE
  1997                           tosl	equ	0xFFD
  1998                           stkptr	equ	0xFFC
  1999                           pclatu	equ	0xFFB
  2000                           pclath	equ	0xFFA
  2001                           pcl	equ	0xFF9
  2002                           tblptru	equ	0xFF8
  2003                           tblptrh	equ	0xFF7
  2004                           tblptrl	equ	0xFF6
  2005                           tablat	equ	0xFF5
  2006                           prodh	equ	0xFF4
  2007                           prodl	equ	0xFF3
  2008                           indf0	equ	0xFEF
  2009                           postinc0	equ	0xFEE
  2010                           postdec0	equ	0xFED
  2011                           preinc0	equ	0xFEC
  2012                           plusw0	equ	0xFEB
  2013                           fsr0h	equ	0xFEA
  2014                           fsr0l	equ	0xFE9
  2015                           wreg	equ	0xFE8
  2016                           indf1	equ	0xFE7
  2017                           postinc1	equ	0xFE6
  2018                           postdec1	equ	0xFE5
  2019                           preinc1	equ	0xFE4
  2020                           plusw1	equ	0xFE3
  2021                           fsr1h	equ	0xFE2
  2022                           fsr1l	equ	0xFE1
  2023                           bsr	equ	0xFE0
  2024                           indf2	equ	0xFDF
  2025                           postinc2	equ	0xFDE
  2026                           postdec2	equ	0xFDD
  2027                           preinc2	equ	0xFDC
  2028                           plusw2	equ	0xFDB
  2029                           fsr2h	equ	0xFDA
  2030                           fsr2l	equ	0xFD9
  2031                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    8
    Data        0
    BSS         16
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     19      35
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    checkAllBtns@rtn	PTR int  size(1) Largest target is 4
		 -> main@direction(COMRAM[4]), 


Critical Paths under _main in COMRAM

    _main->_setup
    _setup->_calibrateMotorXY
    _setup->_calibrateMotorZ
    _calibrateMotorZ->_rotateMotorZ
    _calibrateMotorXY->_rotateMotorXY

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    1501
                                             14 COMRAM     5     5      0
                       _checkAllBtns
                      _rotateMotorXY
                       _rotateMotorZ
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                1     1      0     512
                                             13 COMRAM     1     1      0
                   _calibrateMotorXY
                    _calibrateMotorZ
 ---------------------------------------------------------------------------------
 (2) _calibrateMotorZ                                      5     5      0     256
                                              8 COMRAM     5     5      0
                       _rotateMotorZ
 ---------------------------------------------------------------------------------
 (3) _rotateMotorZ                                         8     6      2     186
                                              0 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (2) _calibrateMotorXY                                     5     5      0     256
                                              8 COMRAM     5     5      0
                      _rotateMotorXY
 ---------------------------------------------------------------------------------
 (3) _rotateMotorXY                                        8     6      2     186
                                              0 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _checkAllBtns                                         7     6      1     464
                                              0 COMRAM     7     6      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _checkAllBtns
   _rotateMotorXY
   _rotateMotorZ
   _setup
     _calibrateMotorXY
       _rotateMotorXY
     _calibrateMotorZ
       _rotateMotorZ

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM            2047      0       0      0.0%
BITBANK7           256      0       0      0.0%
BANK7              256      0       0      0.0%
BITBANK6           256      0       0      0.0%
BANK6              256      0       0      0.0%
BITBANK5           256      0       0      0.0%
BANK5              256      0       0      0.0%
BITBANK4           256      0       0      0.0%
BANK4              256      0       0      0.0%
BITBANK3           256      0       0      0.0%
BANK3              256      0       0      0.0%
BITBANK2           256      0       0      0.0%
BANK2              256      0       0      0.0%
BITBANK1           256      0       0      0.0%
BANK1              256      0       0      0.0%
BITBANK0           160      0       0      0.0%
BANK0              160      0       0      0.0%
BITBIGSFRh         118      0       0      0.0%
BITCOMRAM           95      0       0      0.0%
COMRAM              95     19      35     36.8%
BITBIGSFRll         34      0       0      0.0%
BITBIGSFRlh          5      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0      35      0.0%


Microchip Technology PIC18 Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Wed Oct 01 11:12:04 2025

                      l45 0826                        l46 09C6                        l90 0CA8  
                      l68 0EAA                        l93 0CEE                        l79 0DD2  
        ?_calibrateMotorZ 0001              _rotateMotorZ 0CF0                       l110 0F06  
                     l104 0BB8                       l107 0BFE                       u400 0EA2  
                     u401 0E9E                       u410 0D02                       u411 0CFE  
                     u420 0D5A                       u500 0B94                       u421 0D56  
                     u501 0B90                       u430 0D72                       u510 0BB8  
                     u431 0D6E                       u511 0BB4                       u440 0DCA  
                     u520 0BCE                       u441 0DC6                       u521 0BCA  
                     u610 089E                       u530 0818                       u370 0DE6  
                     u450 0C3A                       u611 0896                       u531 0814  
                     u371 0DE2                       u451 0C36                       u540 0826  
                     u380 0E38                       u460 0C84                       u700 0AA6  
                     u541 0822                       u381 0E34                       u461 0C80  
                     u701 0AA2                       u630 08BA                       u550 0834  
                     u390 0E50                       u470 0CA8                       u710 0ACA  
                     u631 08B2                       u551 0830                       u391 0E4C  
                     u471 0CA4                       u711 0AC6                       u608 0886  
                     u560 0842                       u480 0CBE                       u720 0AE8  
                     u561 083E                       u481 0CBA                       u721 0AE4  
                     u570 0870                       u490 0B4A                       u650 0A04  
                     u571 0868                       u491 0B46                       u651 0A00  
                     u628 08A0                       u660 0A22                       u661 0A1E  
                     u590 0884                       u670 0A46                       u591 087C  
                     u807 0D32                       u671 0A42                       u648 08BC  
                     u680 0A64                       u817 0DA2                       u681 0A60  
                     u737 09E2                       u690 0A88                       u827 0C58  
                     u747 0B00                       u691 0A84                       u588 0872  
                     u837 0CD4                       u757 0ECE                       u847 0E10  
                     u767 0EE6                       u857 0E7A                       u777 0EFE  
                     u787 0B68                       u797 0BE4         ?_calibrateMotorXY 0001  
                     wreg 0FE8             _rotateMotorXY 0DD4        ??_calibrateMotorXY 0009  
                    l1102 0E58                      l1110 0EA6                      l1104 0E74  
                    l1120 0D0A                      l1112 0CF0                      l1200 0B76  
                    l1106 0E82                      l1130 0D72                      l1122 0D2C  
                    l1114 0D02                      l1202 0B98                      l1108 0E86  
                    l1140 0DAA                      l1124 0D3A                      l1220 0BF6  
                    l1212 0BD2                      l1204 0BA4                      l1300 0EDE  
                    l1230 084C                      l1222 080A                      l1150 0C28  
                    l1142 0DAE                      l1126 0D3E                      l1214 0BDE  
                    l1206 0BAA                      l1310 0EF6                      l1302 0EE0  
                    l1240 08F4                      l1224 0818                      l1080 0DE6  
                    l1160 0C62                      l1152 0C2C                      l1136 0D7A  
                    l1144 0DCE                      l1128 0D5E                      l1216 0BEE  
                    l1208 0BC0                      l1312 0EF8                      l1304 0EEE  
                    l1320 09EA                      l1242 08FE                      l1226 0834  
                    l1234 085E                      l1090 0E18                      l1170 0CB0  
                    l1162 0C66                      l1154 0C3A                      l1146 0C00  
                    l1138 0D9C                      l1306 0EF2                      l1330 0A32  
                    l1322 09F2                      l1314 09C8                      l1260 095C  
                    l1252 0938                      l1244 0914                      l1236 08D4  
                    l1228 0842                      l1092 0E1C                      l1164 0C88  
                    l1156 0C46                      l1148 0C1C                      l1308 0EF4  
                    l1340 0A88                      l1332 0A46                      l1324 0A04  
                    l1316 09CC                      l1238 08DE                      l1086 0DEE  
                    l1094 0E3C                      l1078 0DD4                      l1182 0CE6  
                    l1174 0CC2                      l1166 0C94                      l1158 0C52  
                    l1190 0B3C                      l1350 0AE8                      l1342 0AA6  
                    l1334 0A64                      l1326 0A22                      l1318 09DC  
                    l1264 096E                      l1256 094A                      l1248 0926  
                    l1096 0E50                      l1088 0E0A                      l1176 0CCE  
                    l1168 0C9A                      l1192 0B4A                      l1184 0B10  
                    l1280 0EB6                      l1352 0AF4                      l1344 0AB2  
                    l1336 0A70                      l1328 0A2E                      l1274 0980  
                    l1178 0CDE                      l1194 0B56                      l1186 0B2C  
                    l1290 0EC6                      l1282 0EBA                      l1354 0AFA  
                    l1346 0AB6                      l1338 0A76                      l1196 0B62  
                    l1188 0B38                      l1292 0EC8                      l1284 0EBE  
                    l1276 0EAC                      l1348 0ACA                      l1198 0B72  
                    l1294 0ED6                      l1286 0EC2                      l1278 0EB4  
                    l1296 0EDA                      l1288 0EC4                      l1298 0EDC  
                    _LATB 0F8A                      _main 09C8                      fsr2h 0FDA  
                    fsr2l 0FD9                      start 7FFC              ___param_bank 0000  
                   ?_main 0001            ?_rotateMotorXY 0001                     _TRISA 0F92  
                   _TRISB 0F93                     _TRISC 0F94                     _TRISD 0F95  
                   _setup 0EAC                     tablat 0FF5                     status 0FD8  
         __initialization 0F08              __end_of_main 0B10        checkAllBtns@select 0007  
                  ??_main 000F             __activetblptr 0002             main@direction 0010  
                  _ADCON1 0FC1                    ?_setup 0001                    _OSCCON 0FD3  
        calibrateMotorZ@i 000A                    clear_0 0F0E                    isa$std 0001  
         ??_rotateMotorXY 0003              _checkAllBtns 080A              __mediumconst 0800  
                  tblptrh 0FF7                    tblptrl 0FF6                    tblptru 0FF8  
        __end_of_steps_cw 0809                __accesstop 0060   __end_of__initialization 0F14  
           ___rparam_used 0001            __pcstackCOMRAM 0001         rotateMotorZ@i_213 0007  
           __end_of_setup 0F08                   ??_setup 000E             rotateMotorZ@i 0005  
    calibrateMotorZ@i_229 000C                   __Hparam 0000                   __Lparam 0000  
            __psmallconst 0800                   __pcinit 0F08                   __ramtop 0800  
                 __ptext0 09C8                   __ptext1 0EAC                   __ptext2 0B10  
                 __ptext3 0CF0                   __ptext4 0C00                   __ptext5 0DD4  
                 __ptext6 080A         calibrateMotorXY@i 000A                   _upSteps 001A  
   rotateMotorZ@direction 0001      end_of_initialization 0F14             __Lmediumconst 0000  
              _rightSteps 001E                   postdec2 0FDD                   postinc0 0FEE  
                 postinc2 0FDE         __end_of_steps_ccw 0805                 _PORTCbits 0F82  
               _PORTDbits 0F83                _positionXY 0022         ??_calibrateMotorZ 0009  
        _calibrateMotorXY 0C00             ?_rotateMotorZ 0001        rotateMotorXY@i_209 0007  
   __end_of_rotateMotorXY 0EAC       start_initialization 0F08            ??_rotateMotorZ 0003  
             __pbssCOMRAM 0014           checkAllBtns@rtn 0001            rotateMotorXY@i 0005  
             __smallconst 0800                 _leftSteps 001C                 _downSteps 0018  
                _LATAbits 0F89     calibrateMotorXY@i_225 000C                 main@F3370 0014  
               _positionZ 0020             ?_checkAllBtns 0001                 _steps_ccw 0801  
__end_of_calibrateMotorXY 0CF0           _calibrateMotorZ 0B10      __end_of_rotateMotorZ 0DD4  
                __Hrparam 0000                  __Lrparam 0000            ??_checkAllBtns 0002  
                isa$xinst 0000                  _steps_cw 0805   __end_of_calibrateMotorZ 0C00  
  rotateMotorXY@direction 0001      __end_of_checkAllBtns 09C8  
