

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Tue Sep 09 16:20:12 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,space=0,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1
    11                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    12                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    14                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    15   000000                     
    16                           ; Generated 05/12/2024 GMT
    17                           ; 
    18                           ; Copyright Â© 2024, Microchip Technology Inc. and its subsidiaries ("Microchip")
    19                           ; All rights reserved.
    20                           ; 
    21                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    22                           ; 
    23                           ; Redistribution and use in source and binary forms, with or without modification, are
    24                           ; permitted provided that the following conditions are met:
    25                           ; 
    26                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    27                           ;        conditions and the following disclaimer.
    28                           ; 
    29                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    30                           ;        of conditions and the following disclaimer in the documentation and/or other
    31                           ;        materials provided with the distribution. Publication is not required when
    32                           ;        this file is used in an embedded application.
    33                           ; 
    34                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    35                           ;        software without specific prior written permission.
    36                           ; 
    37                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    38                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    39                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    40                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    41                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    42                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    43                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    44                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    45                           ; 
    46                           ; 
    47                           ; Code-generator required, PIC18F4520 Definitions
    48                           ; 
    49                           ; SFR Addresses
    50   000FE0                     bsr             equ	4064
    51   000FE9                     fsr0            equ	4073
    52   000FEA                     fsr0h           equ	4074
    53   000FE9                     fsr0l           equ	4073
    54   000FE1                     fsr1            equ	4065
    55   000FE2                     fsr1h           equ	4066
    56   000FE1                     fsr1l           equ	4065
    57   000FD9                     fsr2            equ	4057
    58   000FDA                     fsr2h           equ	4058
    59   000FD9                     fsr2l           equ	4057
    60   000FEF                     indf0           equ	4079
    61   000FE7                     indf1           equ	4071
    62   000FDF                     indf2           equ	4063
    63   000FF2                     intcon          equ	4082
    64   000000                     nvmcon          equ	0
    65   000FF9                     pcl             equ	4089
    66   000FFA                     pclath          equ	4090
    67   000FFB                     pclatu          equ	4091
    68   000FEB                     plusw0          equ	4075
    69   000FE3                     plusw1          equ	4067
    70   000FDB                     plusw2          equ	4059
    71   000FED                     postdec0        equ	4077
    72   000FE5                     postdec1        equ	4069
    73   000FDD                     postdec2        equ	4061
    74   000FEE                     postinc0        equ	4078
    75   000FE6                     postinc1        equ	4070
    76   000FDE                     postinc2        equ	4062
    77   000FEC                     preinc0         equ	4076
    78   000FE4                     preinc1         equ	4068
    79   000FDC                     preinc2         equ	4060
    80   000FF3                     prod            equ	4083
    81   000FF4                     prodh           equ	4084
    82   000FF3                     prodl           equ	4083
    83   000FD8                     status          equ	4056
    84   000FF5                     tablat          equ	4085
    85   000FF6                     tblptr          equ	4086
    86   000FF7                     tblptrh         equ	4087
    87   000FF6                     tblptrl         equ	4086
    88   000FF8                     tblptru         equ	4088
    89   000FFD                     tosl            equ	4093
    90   000FE8                     wreg            equ	4072
    91   000F80                     PORTA           equ	3968	;# 
    92   000F81                     PORTB           equ	3969	;# 
    93   000F82                     PORTC           equ	3970	;# 
    94   000F83                     PORTD           equ	3971	;# 
    95   000F84                     PORTE           equ	3972	;# 
    96   000F89                     LATA            equ	3977	;# 
    97   000F8A                     LATB            equ	3978	;# 
    98   000F8B                     LATC            equ	3979	;# 
    99   000F8C                     LATD            equ	3980	;# 
   100   000F8D                     LATE            equ	3981	;# 
   101   000F92                     TRISA           equ	3986	;# 
   102   000F92                     DDRA            equ	3986	;# 
   103   000F93                     TRISB           equ	3987	;# 
   104   000F93                     DDRB            equ	3987	;# 
   105   000F94                     TRISC           equ	3988	;# 
   106   000F94                     DDRC            equ	3988	;# 
   107   000F95                     TRISD           equ	3989	;# 
   108   000F95                     DDRD            equ	3989	;# 
   109   000F96                     TRISE           equ	3990	;# 
   110   000F96                     DDRE            equ	3990	;# 
   111   000F9B                     OSCTUNE         equ	3995	;# 
   112   000F9D                     PIE1            equ	3997	;# 
   113   000F9E                     PIR1            equ	3998	;# 
   114   000F9F                     IPR1            equ	3999	;# 
   115   000FA0                     PIE2            equ	4000	;# 
   116   000FA1                     PIR2            equ	4001	;# 
   117   000FA2                     IPR2            equ	4002	;# 
   118   000FA6                     EECON1          equ	4006	;# 
   119   000FA7                     EECON2          equ	4007	;# 
   120   000FA8                     EEDATA          equ	4008	;# 
   121   000FA9                     EEADR           equ	4009	;# 
   122   000FAB                     RCSTA           equ	4011	;# 
   123   000FAB                     RCSTA1          equ	4011	;# 
   124   000FAC                     TXSTA           equ	4012	;# 
   125   000FAC                     TXSTA1          equ	4012	;# 
   126   000FAD                     TXREG           equ	4013	;# 
   127   000FAD                     TXREG1          equ	4013	;# 
   128   000FAE                     RCREG           equ	4014	;# 
   129   000FAE                     RCREG1          equ	4014	;# 
   130   000FAF                     SPBRG           equ	4015	;# 
   131   000FAF                     SPBRG1          equ	4015	;# 
   132   000FB0                     SPBRGH          equ	4016	;# 
   133   000FB1                     T3CON           equ	4017	;# 
   134   000FB2                     TMR3            equ	4018	;# 
   135   000FB2                     TMR3L           equ	4018	;# 
   136   000FB3                     TMR3H           equ	4019	;# 
   137   000FB4                     CMCON           equ	4020	;# 
   138   000FB5                     CVRCON          equ	4021	;# 
   139   000FB6                     ECCP1AS         equ	4022	;# 
   140   000FB6                     ECCPAS          equ	4022	;# 
   141   000FB7                     PWM1CON         equ	4023	;# 
   142   000FB7                     ECCP1DEL        equ	4023	;# 
   143   000FB8                     BAUDCON         equ	4024	;# 
   144   000FB8                     BAUDCTL         equ	4024	;# 
   145   000FBA                     CCP2CON         equ	4026	;# 
   146   000FBB                     CCPR2           equ	4027	;# 
   147   000FBB                     CCPR2L          equ	4027	;# 
   148   000FBC                     CCPR2H          equ	4028	;# 
   149   000FBD                     CCP1CON         equ	4029	;# 
   150   000FBE                     CCPR1           equ	4030	;# 
   151   000FBE                     CCPR1L          equ	4030	;# 
   152   000FBF                     CCPR1H          equ	4031	;# 
   153   000FC0                     ADCON2          equ	4032	;# 
   154   000FC1                     ADCON1          equ	4033	;# 
   155   000FC2                     ADCON0          equ	4034	;# 
   156   000FC3                     ADRES           equ	4035	;# 
   157   000FC3                     ADRESL          equ	4035	;# 
   158   000FC4                     ADRESH          equ	4036	;# 
   159   000FC5                     SSPCON2         equ	4037	;# 
   160   000FC6                     SSPCON1         equ	4038	;# 
   161   000FC7                     SSPSTAT         equ	4039	;# 
   162   000FC8                     SSPADD          equ	4040	;# 
   163   000FC9                     SSPBUF          equ	4041	;# 
   164   000FCA                     T2CON           equ	4042	;# 
   165   000FCB                     PR2             equ	4043	;# 
   166   000FCB                     MEMCON          equ	4043	;# 
   167   000FCC                     TMR2            equ	4044	;# 
   168   000FCD                     T1CON           equ	4045	;# 
   169   000FCE                     TMR1            equ	4046	;# 
   170   000FCE                     TMR1L           equ	4046	;# 
   171   000FCF                     TMR1H           equ	4047	;# 
   172   000FD0                     RCON            equ	4048	;# 
   173   000FD1                     WDTCON          equ	4049	;# 
   174   000FD2                     HLVDCON         equ	4050	;# 
   175   000FD2                     LVDCON          equ	4050	;# 
   176   000FD3                     OSCCON          equ	4051	;# 
   177   000FD5                     T0CON           equ	4053	;# 
   178   000FD6                     TMR0            equ	4054	;# 
   179   000FD6                     TMR0L           equ	4054	;# 
   180   000FD7                     TMR0H           equ	4055	;# 
   181   000FD8                     STATUS          equ	4056	;# 
   182   000FD9                     FSR2            equ	4057	;# 
   183   000FD9                     FSR2L           equ	4057	;# 
   184   000FDA                     FSR2H           equ	4058	;# 
   185   000FDB                     PLUSW2          equ	4059	;# 
   186   000FDC                     PREINC2         equ	4060	;# 
   187   000FDD                     POSTDEC2        equ	4061	;# 
   188   000FDE                     POSTINC2        equ	4062	;# 
   189   000FDF                     INDF2           equ	4063	;# 
   190   000FE0                     BSR             equ	4064	;# 
   191   000FE1                     FSR1            equ	4065	;# 
   192   000FE1                     FSR1L           equ	4065	;# 
   193   000FE2                     FSR1H           equ	4066	;# 
   194   000FE3                     PLUSW1          equ	4067	;# 
   195   000FE4                     PREINC1         equ	4068	;# 
   196   000FE5                     POSTDEC1        equ	4069	;# 
   197   000FE6                     POSTINC1        equ	4070	;# 
   198   000FE7                     INDF1           equ	4071	;# 
   199   000FE8                     WREG            equ	4072	;# 
   200   000FE9                     FSR0            equ	4073	;# 
   201   000FE9                     FSR0L           equ	4073	;# 
   202   000FEA                     FSR0H           equ	4074	;# 
   203   000FEB                     PLUSW0          equ	4075	;# 
   204   000FEC                     PREINC0         equ	4076	;# 
   205   000FED                     POSTDEC0        equ	4077	;# 
   206   000FEE                     POSTINC0        equ	4078	;# 
   207   000FEF                     INDF0           equ	4079	;# 
   208   000FF0                     INTCON3         equ	4080	;# 
   209   000FF1                     INTCON2         equ	4081	;# 
   210   000FF2                     INTCON          equ	4082	;# 
   211   000FF3                     PROD            equ	4083	;# 
   212   000FF3                     PRODL           equ	4083	;# 
   213   000FF4                     PRODH           equ	4084	;# 
   214   000FF5                     TABLAT          equ	4085	;# 
   215   000FF6                     TBLPTR          equ	4086	;# 
   216   000FF6                     TBLPTRL         equ	4086	;# 
   217   000FF7                     TBLPTRH         equ	4087	;# 
   218   000FF8                     TBLPTRU         equ	4088	;# 
   219   000FF9                     PCLAT           equ	4089	;# 
   220   000FF9                     PC              equ	4089	;# 
   221   000FF9                     PCL             equ	4089	;# 
   222   000FFA                     PCLATH          equ	4090	;# 
   223   000FFB                     PCLATU          equ	4091	;# 
   224   000FFC                     STKPTR          equ	4092	;# 
   225   000FFD                     TOS             equ	4093	;# 
   226   000FFD                     TOSL            equ	4093	;# 
   227   000FFE                     TOSH            equ	4094	;# 
   228   000FFF                     TOSU            equ	4095	;# 
   229                           
   230                           	psect	smallconst
   231   000600                     __psmallconst:
   232                           	callstack 0
   233   000600  00                 	db	0
   234   000601                     rotateMotor@F2704:
   235                           	callstack 0
   236   000601  08                 	db	8
   237   000602  02                 	db	2
   238   000603  04                 	db	4
   239   000604  01                 	db	1
   240   000605                     __end_ofrotateMotor@F2704:
   241                           	callstack 0
   242   000605                     rotateMotor@F2701:
   243                           	callstack 0
   244   000605  01                 	db	1
   245   000606  04                 	db	4
   246   000607  02                 	db	2
   247   000608  08                 	db	8
   248   000609                     __end_ofrotateMotor@F2701:
   249                           	callstack 0
   250   000F95                     _TRISD          set	3989
   251   000F93                     _TRISB          set	3987
   252   000FC1                     _ADCON1         set	4033
   253   000F8A                     _LATB           set	3978
   254   000F83                     _PORTDbits      set	3971
   255   000609  00                 	db	0	; dummy byte at the end
   256   000600                     __smallconst    set	__psmallconst
   257   000600                     __mediumconst   set	__psmallconst
   258   000001                     __activetblptr  equ	1
   259                           
   260                           ; #config settings
   261                           
   262                           	psect	cinit
   263   0007B8                     __pcinit:
   264                           	callstack 0
   265   0007B8                     start_initialization:
   266                           	callstack 0
   267   0007B8                     __initialization:
   268                           	callstack 0
   269   0007B8                     end_of_initialization:
   270                           	callstack 0
   271   0007B8                     __end_of__initialization:
   272                           	callstack 0
   273   0007B8  0E00               	movlw	low (__Lsmallconst shr (0+16))
   274   0007BA  6EF8               	movwf	tblptru,c
   275   0007BC  0E06               	movlw	high __Lsmallconst
   276   0007BE  6EF7               	movwf	tblptrh,c
   277   0007C0  0100               	movlb	0
   278   0007C2  EFB8  F003         	goto	_main	;jump to C main() function
   279                           
   280                           	psect	cstackCOMRAM
   281   000001                     __pcstackCOMRAM:
   282                           	callstack 0
   283   000001                     ?_checkBtn:
   284                           	callstack 0
   285   000001                     rotateMotor@direction:
   286                           	callstack 0
   287                           
   288                           ; 2 bytes @ 0x0
   289   000001                     	ds	2
   290   000003                     ??_checkBtn:
   291   000003                     ??_rotateMotor:
   292                           
   293                           ; 1 bytes @ 0x2
   294   000003                     	ds	1
   295   000004                     rotateMotor@steps:
   296                           	callstack 0
   297                           
   298                           ; 4 bytes @ 0x3
   299   000004                     	ds	4
   300   000008                     rotateMotor@steps_107:
   301                           	callstack 0
   302                           
   303                           ; 4 bytes @ 0x7
   304   000008                     	ds	4
   305   00000C                     rotateMotor@i:
   306                           	callstack 0
   307                           
   308                           ; 2 bytes @ 0xB
   309   00000C                     	ds	2
   310   00000E                     rotateMotor@i_108:
   311                           	callstack 0
   312                           
   313                           ; 2 bytes @ 0xD
   314   00000E                     	ds	2
   315   000010                     ??_main:
   316                           
   317                           ; 1 bytes @ 0xF
   318   000010                     	ds	1
   319   000011                     main@direction:
   320                           	callstack 0
   321                           
   322                           ; 2 bytes @ 0x10
   323   000011                     	ds	2
   324                           
   325 ;;
   326 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   327 ;;
   328 ;; *************** function _main *****************
   329 ;; Defined at:
   330 ;;		line 111 in file "../../src/stepper.c"
   331 ;; Parameters:    Size  Location     Type
   332 ;;		None
   333 ;; Auto vars:     Size  Location     Type
   334 ;;  direction       2   16[COMRAM] int 
   335 ;; Return value:  Size  Location     Type
   336 ;;                  1    wreg      void 
   337 ;; Registers used:
   338 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   339 ;; Tracked objects:
   340 ;;		On entry : 0/0
   341 ;;		On exit  : 0/0
   342 ;;		Unchanged: 0/0
   343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   344 ;;      Params:         0       0       0       0       0       0       0
   345 ;;      Locals:         2       0       0       0       0       0       0
   346 ;;      Temps:          1       0       0       0       0       0       0
   347 ;;      Totals:         3       0       0       0       0       0       0
   348 ;;Total ram usage:        3 bytes
   349 ;; Hardware stack levels required when called: 1
   350 ;; This function calls:
   351 ;;		_checkBtn
   352 ;;		_rotateMotor
   353 ;; This function is called by:
   354 ;;		Startup code after reset
   355 ;; This function uses a non-reentrant model
   356 ;;
   357                           
   358                           	psect	text0
   359   000770                     __ptext0:
   360                           	callstack 0
   361   000770                     _main:
   362                           	callstack 30
   363   000770                     
   364                           ;../../src/stepper.c: 113:     ADCON1 = 0x0F;
   365   000770  0E0F               	movlw	15
   366   000772  6EC1               	movwf	193,c	;volatile
   367   000774                     
   368                           ;../../src/stepper.c: 115:     TRISB &= ~0x0F;
   369   000774  0EF0               	movlw	240
   370   000776  1693               	andwf	147,f,c	;volatile
   371   000778                     
   372                           ;../../src/stepper.c: 116:     TRISD |=0x03;
   373   000778  0E03               	movlw	3
   374   00077A  1295               	iorwf	149,f,c	;volatile
   375   00077C                     l850:
   376                           
   377                           ;../../src/stepper.c: 121:         _delay((unsigned long)((20)*(8000000/4000.0)));
   378   00077C  0E34               	movlw	52
   379   00077E  6E10               	movwf	??_main^0,c
   380   000780  0EF2               	movlw	242
   381   000782                     u177:
   382   000782  2EE8               	decfsz	wreg,f,c
   383   000784  D7FE               	bra	u177
   384   000786  2E10               	decfsz	??_main^0,f,c
   385   000788  D7FC               	bra	u177
   386   00078A                     
   387                           ;../../src/stepper.c: 122:         direction = checkBtn();
   388   00078A  EC85  F003         	call	_checkBtn	;wreg free
   389   00078E  C001  F011         	movff	?_checkBtn,main@direction
   390   000792  C002  F012         	movff	?_checkBtn+1,main@direction+1
   391   000796                     
   392                           ;../../src/stepper.c: 123:         rotateMotor(direction);
   393   000796  C011  F001         	movff	main@direction,rotateMotor@direction
   394   00079A  C012  F002         	movff	main@direction+1,rotateMotor@direction+1
   395   00079E  EC05  F003         	call	_rotateMotor	;wreg free
   396   0007A2                     
   397                           ;../../src/stepper.c: 124:         _delay((unsigned long)((20)*(8000000/4000.0)));
   398   0007A2  0E34               	movlw	52
   399   0007A4  6E10               	movwf	??_main^0,c
   400   0007A6  0EF2               	movlw	242
   401   0007A8                     u187:
   402   0007A8  2EE8               	decfsz	wreg,f,c
   403   0007AA  D7FE               	bra	u187
   404   0007AC  2E10               	decfsz	??_main^0,f,c
   405   0007AE  D7FC               	bra	u187
   406   0007B0  EFBE  F003         	goto	l850
   407   0007B4  EFFE  F03F         	goto	start
   408   0007B8                     __end_of_main:
   409                           	callstack 0
   410                           
   411 ;; *************** function _rotateMotor *****************
   412 ;; Defined at:
   413 ;;		line 88 in file "../../src/stepper.c"
   414 ;; Parameters:    Size  Location     Type
   415 ;;  direction       2    0[COMRAM] int 
   416 ;; Auto vars:     Size  Location     Type
   417 ;;  i               2   13[COMRAM] int 
   418 ;;  i               2   11[COMRAM] int 
   419 ;;  steps           4    7[COMRAM] const unsigned char [4]
   420 ;;  steps           4    3[COMRAM] const unsigned char [4]
   421 ;; Return value:  Size  Location     Type
   422 ;;                  1    wreg      void 
   423 ;; Registers used:
   424 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
   425 ;; Tracked objects:
   426 ;;		On entry : 0/0
   427 ;;		On exit  : 0/0
   428 ;;		Unchanged: 0/0
   429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   430 ;;      Params:         2       0       0       0       0       0       0
   431 ;;      Locals:        12       0       0       0       0       0       0
   432 ;;      Temps:          1       0       0       0       0       0       0
   433 ;;      Totals:        15       0       0       0       0       0       0
   434 ;;Total ram usage:       15 bytes
   435 ;; Hardware stack levels used: 1
   436 ;; This function calls:
   437 ;;		Nothing
   438 ;; This function is called by:
   439 ;;		_main
   440 ;; This function uses a non-reentrant model
   441 ;;
   442                           
   443                           	psect	text1
   444   00060A                     __ptext1:
   445                           	callstack 0
   446   00060A                     _rotateMotor:
   447                           	callstack 30
   448   00060A                     
   449                           ;../../src/stepper.c: 89:     if (direction == 1) {
   450   00060A  0401               	decf	rotateMotor@direction^0,w,c
   451   00060C  1002               	iorwf	(rotateMotor@direction+1)^0,w,c
   452   00060E  A4D8               	btfss	status,2,c
   453   000610  EF0C  F003         	goto	u131
   454   000614  EF0E  F003         	goto	u130
   455   000618                     u131:
   456   000618  EF43  F003         	goto	l824
   457   00061C                     u130:
   458   00061C                     
   459                           ;../../src/stepper.c: 90:         const unsigned char steps[4] = {0b0001, 0b0100, 0b0010
      +                          , 0b1000};
   460   00061C  0E05               	movlw	low rotateMotor@F2701
   461   00061E  6EF6               	movwf	tblptrl,c
   462   000620                     	if	0	;There is only one active tblptr byte
   463   000620                     	endif
   464   000620                     	if	0	;There are less than 3 active tblptr bytes
   465   000620                     	endif
   466   000620  0009               	tblrd		*+
   467   000622  CFF5 F004          	movff	tablat,rotateMotor@steps
   468   000626  0009               	tblrd		*+
   469   000628  CFF5 F005          	movff	tablat,rotateMotor@steps+1
   470   00062C  0009               	tblrd		*+
   471   00062E  CFF5 F006          	movff	tablat,rotateMotor@steps+2
   472   000632  000A               	tblrd		*-
   473   000634  CFF5 F007          	movff	tablat,rotateMotor@steps+3
   474   000638                     
   475                           ;../../src/stepper.c: 92:         for (int i = 0; i < 4; i++) {
   476   000638  0E00               	movlw	0
   477   00063A  6E0D               	movwf	(rotateMotor@i+1)^0,c
   478   00063C  0E00               	movlw	0
   479   00063E  6E0C               	movwf	rotateMotor@i^0,c
   480   000640                     l816:
   481                           
   482                           ;../../src/stepper.c: 93:             LATB = (LATB & 0xF0) | steps[i];
   483   000640  500C               	movf	rotateMotor@i^0,w,c
   484   000642  0F04               	addlw	low rotateMotor@steps
   485   000644  6ED9               	movwf	fsr2l,c
   486   000646  6ADA               	clrf	fsr2h,c
   487   000648  50DF               	movf	indf2,w,c
   488   00064A  6E03               	movwf	??_rotateMotor^0,c
   489   00064C  508A               	movf	138,w,c	;volatile
   490   00064E  0BF0               	andlw	240
   491   000650  1003               	iorwf	??_rotateMotor^0,w,c
   492   000652  6E8A               	movwf	138,c	;volatile
   493   000654                     
   494                           ;../../src/stepper.c: 94:             _delay((unsigned long)((50)*(8000000/4000.0)));
   495   000654  0E82               	movlw	130
   496   000656  6E03               	movwf	??_rotateMotor^0,c
   497   000658  0EDE               	movlw	222
   498   00065A                     u197:
   499   00065A  2EE8               	decfsz	wreg,f,c
   500   00065C  D7FE               	bra	u197
   501   00065E  2E03               	decfsz	??_rotateMotor^0,f,c
   502   000660  D7FC               	bra	u197
   503   000662                     
   504                           ;../../src/stepper.c: 95:         }
   505   000662  4A0C               	infsnz	rotateMotor@i^0,f,c
   506   000664  2A0D               	incf	(rotateMotor@i+1)^0,f,c
   507   000666  BE0D               	btfsc	(rotateMotor@i+1)^0,7,c
   508   000668  EF3F  F003         	goto	u141
   509   00066C  500D               	movf	(rotateMotor@i+1)^0,w,c
   510   00066E  E109               	bnz	u140
   511   000670  0E04               	movlw	4
   512   000672  5C0C               	subwf	rotateMotor@i^0,w,c
   513   000674  A0D8               	btfss	status,0,c
   514   000676  EF3F  F003         	goto	u141
   515   00067A  EF41  F003         	goto	u140
   516   00067E                     u141:
   517   00067E  EF20  F003         	goto	l816
   518   000682                     u140:
   519   000682  EF84  F003         	goto	l34
   520   000686                     l824:
   521   000686  0E02               	movlw	2
   522   000688  1801               	xorwf	rotateMotor@direction^0,w,c
   523   00068A  1002               	iorwf	(rotateMotor@direction+1)^0,w,c
   524   00068C  A4D8               	btfss	status,2,c
   525   00068E  EF4B  F003         	goto	u151
   526   000692  EF4D  F003         	goto	u150
   527   000696                     u151:
   528   000696  EF82  F003         	goto	l842
   529   00069A                     u150:
   530   00069A                     
   531                           ;../../src/stepper.c: 98:         const unsigned char steps[4] = {0b1000, 0b0010, 0b0100
      +                          , 0b0001};
   532   00069A  0E01               	movlw	low rotateMotor@F2704
   533   00069C  6EF6               	movwf	tblptrl,c
   534   00069E                     	if	0	;There is only one active tblptr byte
   535   00069E                     	endif
   536   00069E                     	if	0	;There are less than 3 active tblptr bytes
   537   00069E                     	endif
   538   00069E  0009               	tblrd		*+
   539   0006A0  CFF5 F008          	movff	tablat,rotateMotor@steps_107
   540   0006A4  0009               	tblrd		*+
   541   0006A6  CFF5 F009          	movff	tablat,rotateMotor@steps_107+1
   542   0006AA  0009               	tblrd		*+
   543   0006AC  CFF5 F00A          	movff	tablat,rotateMotor@steps_107+2
   544   0006B0  000A               	tblrd		*-
   545   0006B2  CFF5 F00B          	movff	tablat,rotateMotor@steps_107+3
   546   0006B6                     
   547                           ;../../src/stepper.c: 100:         for (int i = 0; i < 4; i++) {
   548   0006B6  0E00               	movlw	0
   549   0006B8  6E0F               	movwf	(rotateMotor@i_108+1)^0,c
   550   0006BA  0E00               	movlw	0
   551   0006BC  6E0E               	movwf	rotateMotor@i_108^0,c
   552   0006BE                     l834:
   553                           
   554                           ;../../src/stepper.c: 101:             LATB = (LATB & 0xF0) | steps[i];
   555   0006BE  500E               	movf	rotateMotor@i_108^0,w,c
   556   0006C0  0F08               	addlw	low rotateMotor@steps_107
   557   0006C2  6ED9               	movwf	fsr2l,c
   558   0006C4  6ADA               	clrf	fsr2h,c
   559   0006C6  50DF               	movf	indf2,w,c
   560   0006C8  6E03               	movwf	??_rotateMotor^0,c
   561   0006CA  508A               	movf	138,w,c	;volatile
   562   0006CC  0BF0               	andlw	240
   563   0006CE  1003               	iorwf	??_rotateMotor^0,w,c
   564   0006D0  6E8A               	movwf	138,c	;volatile
   565   0006D2                     
   566                           ;../../src/stepper.c: 102:             _delay((unsigned long)((50)*(8000000/4000.0)));
   567   0006D2  0E82               	movlw	130
   568   0006D4  6E03               	movwf	??_rotateMotor^0,c
   569   0006D6  0EDE               	movlw	222
   570   0006D8                     u207:
   571   0006D8  2EE8               	decfsz	wreg,f,c
   572   0006DA  D7FE               	bra	u207
   573   0006DC  2E03               	decfsz	??_rotateMotor^0,f,c
   574   0006DE  D7FC               	bra	u207
   575   0006E0                     
   576                           ;../../src/stepper.c: 103:         }
   577   0006E0  4A0E               	infsnz	rotateMotor@i_108^0,f,c
   578   0006E2  2A0F               	incf	(rotateMotor@i_108+1)^0,f,c
   579   0006E4  BE0F               	btfsc	(rotateMotor@i_108+1)^0,7,c
   580   0006E6  EF7E  F003         	goto	u161
   581   0006EA  500F               	movf	(rotateMotor@i_108+1)^0,w,c
   582   0006EC  E109               	bnz	u160
   583   0006EE  0E04               	movlw	4
   584   0006F0  5C0E               	subwf	rotateMotor@i_108^0,w,c
   585   0006F2  A0D8               	btfss	status,0,c
   586   0006F4  EF7E  F003         	goto	u161
   587   0006F8  EF80  F003         	goto	u160
   588   0006FC                     u161:
   589   0006FC  EF5F  F003         	goto	l834
   590   000700                     u160:
   591   000700  EF84  F003         	goto	l34
   592   000704                     l842:
   593                           
   594                           ;../../src/stepper.c: 107:         LATB &= 0xF0;
   595   000704  0EF0               	movlw	240
   596   000706  168A               	andwf	138,f,c	;volatile
   597   000708                     l34:
   598   000708  0012               	return		;funcret
   599   00070A                     __end_of_rotateMotor:
   600                           	callstack 0
   601                           
   602 ;; *************** function _checkBtn *****************
   603 ;; Defined at:
   604 ;;		line 75 in file "../../src/stepper.c"
   605 ;; Parameters:    Size  Location     Type
   606 ;;		None
   607 ;; Auto vars:     Size  Location     Type
   608 ;;		None
   609 ;; Return value:  Size  Location     Type
   610 ;;                  2    0[COMRAM] int 
   611 ;; Registers used:
   612 ;;		wreg, status,2
   613 ;; Tracked objects:
   614 ;;		On entry : 0/0
   615 ;;		On exit  : 0/0
   616 ;;		Unchanged: 0/0
   617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   618 ;;      Params:         2       0       0       0       0       0       0
   619 ;;      Locals:         0       0       0       0       0       0       0
   620 ;;      Temps:          1       0       0       0       0       0       0
   621 ;;      Totals:         3       0       0       0       0       0       0
   622 ;;Total ram usage:        3 bytes
   623 ;; Hardware stack levels used: 1
   624 ;; This function calls:
   625 ;;		Nothing
   626 ;; This function is called by:
   627 ;;		_main
   628 ;; This function uses a non-reentrant model
   629 ;;
   630                           
   631                           	psect	text2
   632   00070A                     __ptext2:
   633                           	callstack 0
   634   00070A                     _checkBtn:
   635                           	callstack 30
   636   00070A                     
   637                           ;../../src/stepper.c: 76:     if (PORTDbits.RD0 != PORTDbits. RD1) {
   638   00070A  B283               	btfsc	131,1,c	;volatile
   639   00070C  EF8A  F003         	goto	u91
   640   000710  EF8D  F003         	goto	u90
   641   000714                     u91:
   642   000714  0E01               	movlw	1
   643   000716  EF8E  F003         	goto	u92
   644   00071A                     u90:
   645   00071A  0E00               	movlw	0
   646   00071C                     u92:
   647   00071C  6E03               	movwf	??_checkBtn^0,c
   648   00071E  B083               	btfsc	131,0,c	;volatile
   649   000720  EF94  F003         	goto	u101
   650   000724  EF97  F003         	goto	u100
   651   000728                     u101:
   652   000728  0E01               	movlw	1
   653   00072A  EF98  F003         	goto	u102
   654   00072E                     u100:
   655   00072E  0E00               	movlw	0
   656   000730                     u102:
   657   000730  1A03               	xorwf	??_checkBtn^0,f,c
   658   000732  B4D8               	btfsc	status,2,c
   659   000734  EF9E  F003         	goto	u111
   660   000738  EFA0  F003         	goto	u110
   661   00073C                     u111:
   662   00073C  EFB3  F003         	goto	l802
   663   000740                     u110:
   664   000740                     
   665                           ;../../src/stepper.c: 77:         if (!PORTDbits.RD0) {
   666   000740  B083               	btfsc	131,0,c	;volatile
   667   000742  EFA5  F003         	goto	u121
   668   000746  EFA7  F003         	goto	u120
   669   00074A                     u121:
   670   00074A  EFAD  F003         	goto	l798
   671   00074E                     u120:
   672   00074E                     
   673                           ;../../src/stepper.c: 78:             return 1;
   674   00074E  0E00               	movlw	0
   675   000750  6E02               	movwf	(?_checkBtn+1)^0,c
   676   000752  0E01               	movlw	1
   677   000754  6E01               	movwf	?_checkBtn^0,c
   678   000756  EFB7  F003         	goto	l17
   679   00075A                     l798:
   680                           
   681                           ;../../src/stepper.c: 80:             return 2;
   682   00075A  0E00               	movlw	0
   683   00075C  6E02               	movwf	(?_checkBtn+1)^0,c
   684   00075E  0E02               	movlw	2
   685   000760  6E01               	movwf	?_checkBtn^0,c
   686   000762  EFB7  F003         	goto	l17
   687   000766                     l802:
   688                           
   689                           ;../../src/stepper.c: 84:         return 0;
   690   000766  0E00               	movlw	0
   691   000768  6E02               	movwf	(?_checkBtn+1)^0,c
   692   00076A  0E00               	movlw	0
   693   00076C  6E01               	movwf	?_checkBtn^0,c
   694   00076E                     l17:
   695   00076E  0012               	return		;funcret
   696   000770                     __end_of_checkBtn:
   697                           	callstack 0
   698                           
   699                           	psect	rparam
   700   000001                     ___rparam_used  equ	1
   701   000000                     ___param_bank   equ	0
   702   000000                     __Lparam        equ	__Lrparam
   703   000000                     __Hparam        equ	__Hrparam
   704                           
   705                           	psect	idloc
   706                           
   707                           ;Config register IDLOC0 @ 0x200000
   708                           ;	unspecified, using default values
   709   200000                     	org	2097152
   710   200000  FF                 	db	255
   711                           
   712                           ;Config register IDLOC1 @ 0x200001
   713                           ;	unspecified, using default values
   714   200001                     	org	2097153
   715   200001  FF                 	db	255
   716                           
   717                           ;Config register IDLOC2 @ 0x200002
   718                           ;	unspecified, using default values
   719   200002                     	org	2097154
   720   200002  FF                 	db	255
   721                           
   722                           ;Config register IDLOC3 @ 0x200003
   723                           ;	unspecified, using default values
   724   200003                     	org	2097155
   725   200003  FF                 	db	255
   726                           
   727                           ;Config register IDLOC4 @ 0x200004
   728                           ;	unspecified, using default values
   729   200004                     	org	2097156
   730   200004  FF                 	db	255
   731                           
   732                           ;Config register IDLOC5 @ 0x200005
   733                           ;	unspecified, using default values
   734   200005                     	org	2097157
   735   200005  FF                 	db	255
   736                           
   737                           ;Config register IDLOC6 @ 0x200006
   738                           ;	unspecified, using default values
   739   200006                     	org	2097158
   740   200006  FF                 	db	255
   741                           
   742                           ;Config register IDLOC7 @ 0x200007
   743                           ;	unspecified, using default values
   744   200007                     	org	2097159
   745   200007  FF                 	db	255
   746                           
   747                           	psect	config
   748                           
   749                           ; Padding undefined space
   750   300000                     	org	3145728
   751   300000  FF                 	db	255
   752                           
   753                           ;Config register CONFIG1H @ 0x300001
   754                           ;	Oscillator Selection bits
   755                           ;	OSC = INTIO67, Internal oscillator block, port function on RA6 and RA7
   756                           ;	Fail-Safe Clock Monitor Enable bit
   757                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
   758                           ;	Internal/External Oscillator Switchover bit
   759                           ;	IESO = OFF, Oscillator Switchover mode disabled
   760   300001                     	org	3145729
   761   300001  08                 	db	8
   762                           
   763                           ;Config register CONFIG2L @ 0x300002
   764                           ;	Power-up Timer Enable bit
   765                           ;	PWRT = OFF, PWRT disabled
   766                           ;	Brown-out Reset Enable bits
   767                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
   768                           ;	Brown Out Reset Voltage bits
   769                           ;	BORV = 3, Minimum setting
   770   300002                     	org	3145730
   771   300002  1F                 	db	31
   772                           
   773                           ;Config register CONFIG2H @ 0x300003
   774                           ;	Watchdog Timer Enable bit
   775                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
   776                           ;	Watchdog Timer Postscale Select bits
   777                           ;	WDTPS = 32768, 1:32768
   778   300003                     	org	3145731
   779   300003  1E                 	db	30
   780                           
   781                           ; Padding undefined space
   782   300004                     	org	3145732
   783   300004  FF                 	db	255
   784                           
   785                           ;Config register CONFIG3H @ 0x300005
   786                           ;	CCP2 MUX bit
   787                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
   788                           ;	PORTB A/D Enable bit
   789                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
   790                           ;	Low-Power Timer1 Oscillator Enable bit
   791                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
   792                           ;	MCLR Pin Enable bit
   793                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
   794   300005                     	org	3145733
   795   300005  81                 	db	129
   796                           
   797                           ;Config register CONFIG4L @ 0x300006
   798                           ;	Stack Full/Underflow Reset Enable bit
   799                           ;	STVREN = OFF, Stack full/underflow will not cause Reset
   800                           ;	Single-Supply ICSP Enable bit
   801                           ;	LVP = OFF, Single-Supply ICSP disabled
   802                           ;	Extended Instruction Set Enable bit
   803                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
   804                           ;	Background Debugger Enable bit
   805                           ;	DEBUG = 0x1, unprogrammed default
   806   300006                     	org	3145734
   807   300006  80                 	db	128
   808                           
   809                           ; Padding undefined space
   810   300007                     	org	3145735
   811   300007  FF                 	db	255
   812                           
   813                           ;Config register CONFIG5L @ 0x300008
   814                           ;	Code Protection bit
   815                           ;	CP0 = OFF, Block 0 (000800-001FFFh) not code-protected
   816                           ;	Code Protection bit
   817                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code-protected
   818                           ;	Code Protection bit
   819                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code-protected
   820                           ;	Code Protection bit
   821                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code-protected
   822   300008                     	org	3145736
   823   300008  0F                 	db	15
   824                           
   825                           ;Config register CONFIG5H @ 0x300009
   826                           ;	Boot Block Code Protection bit
   827                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
   828                           ;	Data EEPROM Code Protection bit
   829                           ;	CPD = OFF, Data EEPROM not code-protected
   830   300009                     	org	3145737
   831   300009  C0                 	db	192
   832                           
   833                           ;Config register CONFIG6L @ 0x30000A
   834                           ;	Write Protection bit
   835                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
   836                           ;	Write Protection bit
   837                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
   838                           ;	Write Protection bit
   839                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
   840                           ;	Write Protection bit
   841                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
   842   30000A                     	org	3145738
   843   30000A  0F                 	db	15
   844                           
   845                           ;Config register CONFIG6H @ 0x30000B
   846                           ;	Configuration Register Write Protection bit
   847                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
   848                           ;	Boot Block Write Protection bit
   849                           ;	WRTB = OFF, Boot block (000000-0007FFh) not write-protected
   850                           ;	Data EEPROM Write Protection bit
   851                           ;	WRTD = OFF, Data EEPROM not write-protected
   852   30000B                     	org	3145739
   853   30000B  E0                 	db	224
   854                           
   855                           ;Config register CONFIG7L @ 0x30000C
   856                           ;	Table Read Protection bit
   857                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
   858                           ;	Table Read Protection bit
   859                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
   860                           ;	Table Read Protection bit
   861                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
   862                           ;	Table Read Protection bit
   863                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
   864   30000C                     	org	3145740
   865   30000C  0F                 	db	15
   866                           
   867                           ;Config register CONFIG7H @ 0x30000D
   868                           ;	Boot Block Table Read Protection bit
   869                           ;	EBTRB = OFF, Boot block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
   870   30000D                     	org	3145741
   871   30000D  40                 	db	64
   872                           tosu	equ	0xFFF
   873                           tosh	equ	0xFFE
   874                           tosl	equ	0xFFD
   875                           stkptr	equ	0xFFC
   876                           pclatu	equ	0xFFB
   877                           pclath	equ	0xFFA
   878                           pcl	equ	0xFF9
   879                           tblptru	equ	0xFF8
   880                           tblptrh	equ	0xFF7
   881                           tblptrl	equ	0xFF6
   882                           tablat	equ	0xFF5
   883                           prodh	equ	0xFF4
   884                           prodl	equ	0xFF3
   885                           indf0	equ	0xFEF
   886                           postinc0	equ	0xFEE
   887                           postdec0	equ	0xFED
   888                           preinc0	equ	0xFEC
   889                           plusw0	equ	0xFEB
   890                           fsr0h	equ	0xFEA
   891                           fsr0l	equ	0xFE9
   892                           wreg	equ	0xFE8
   893                           indf1	equ	0xFE7
   894                           postinc1	equ	0xFE6
   895                           postdec1	equ	0xFE5
   896                           preinc1	equ	0xFE4
   897                           plusw1	equ	0xFE3
   898                           fsr1h	equ	0xFE2
   899                           fsr1l	equ	0xFE1
   900                           bsr	equ	0xFE0
   901                           indf2	equ	0xFDF
   902                           postinc2	equ	0xFDE
   903                           postdec2	equ	0xFDD
   904                           preinc2	equ	0xFDC
   905                           plusw2	equ	0xFDB
   906                           fsr2h	equ	0xFDA
   907                           fsr2l	equ	0xFD9
   908                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    8
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     18      18
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_rotateMotor

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0     253
                                             15 COMRAM     3     3      0
                           _checkBtn
                        _rotateMotor
 ---------------------------------------------------------------------------------
 (1) _rotateMotor                                         15    13      2     229
                                              0 COMRAM    15    13      2
 ---------------------------------------------------------------------------------
 (1) _checkBtn                                             3     1      2       0
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _checkBtn
   _rotateMotor

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMRAM          127      0       0      0.0%
BITBANK0           128      0       0      0.0%
BITBANK1           256      0       0      0.0%
BITBANK2           256      0       0      0.0%
BITBANK3           256      0       0      0.0%
BITBANK4           256      0       0      0.0%
BITBANK5           256      0       0      0.0%
BITBIGSFRh         124      0       0      0.0%
BITBIGSFRl           3      0       0      0.0%
COMRAM             127     18      18     14.2%
BANK0              128      0       0      0.0%
BANK1              256      0       0      0.0%
BANK2              256      0       0      0.0%
BANK3              256      0       0      0.0%
BANK4              256      0       0      0.0%
BANK5              256      0       0      0.0%
BIGRAM            1535      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0      18      0.0%


Microchip Technology PIC18 Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Tue Sep 09 16:20:12 2025

             _rotateMotor 060A                        l17 076E                        l34 0708  
                      u90 071A                        u91 0714                        u92 071C  
                     l802 0766                       l810 0638                       l820 0662  
                     l822 0666                       l806 060A                       l840 06E4  
                     l816 0640                       l808 061C                       l824 0686  
                     l834 06BE                       l826 069A                       l842 0704  
                     l818 0654                       l850 077C                       l836 06D2  
                     l828 06B6                       l852 078A                       l844 0770  
                     l790 0740                       l838 06E0                       l854 0796  
                     l846 0774                       l792 074E                       l856 07A2  
                     l848 0778                       l788 070A                       l798 075A  
                     u100 072E                       u101 0728                       u110 0740  
                     u102 0730                       u111 073C                       u120 074E  
                     u121 074A                       u130 061C                       u131 0618  
                     u140 0682                       u141 067E                       u150 069A  
                     u207 06D8                       u151 0696                       u160 0700  
                     u161 06FC                       u177 0782                       u187 07A8  
                     u197 065A                       wreg 0FE8                      _LATB 0F8A  
                    _main 0770                      fsr2h 0FDA                      indf2 0FDF  
                    fsr2l 0FD9                      start 7FFC              ___param_bank 0000  
                   ?_main 0001                     _TRISB 0F93                     _TRISD 0F95  
                   tablat 0FF5                     status 0FD8           __initialization 07B8  
            __end_of_main 07B8                    ??_main 0010             __activetblptr 0001  
           main@direction 0011              rotateMotor@i 000C      rotateMotor@direction 0001  
                  _ADCON1 0FC1          __end_of_checkBtn 0770                    isa$std 0001  
            __mediumconst 0600                    tblptrh 0FF7                    tblptrl 0FF6  
                  tblptru 0FF8      rotateMotor@steps_107 0008                __accesstop 0080  
 __end_of__initialization 07B8             ___rparam_used 0001            __pcstackCOMRAM 0001  
            ?_rotateMotor 0001                 ?_checkBtn 0001                   __Hparam 0000  
                 __Lparam 0000              __psmallconst 0600                   __pcinit 07B8  
                 __ramtop 0600                   __ptext0 0770                   __ptext1 060A  
                 __ptext2 070A                ??_checkBtn 0003      end_of_initialization 07B8  
               _PORTDbits 0F83       start_initialization 07B8          rotateMotor@F2701 0605  
        rotateMotor@F2704 0601          rotateMotor@i_108 000E          rotateMotor@steps 0004  
             __smallconst 0600                  __Hrparam 0000                  __Lrparam 0000  
            __Lsmallconst 0600             ??_rotateMotor 0003                  _checkBtn 070A  
__end_ofrotateMotor@F2701 0609  __end_ofrotateMotor@F2704 0605                  isa$xinst 0000  
     __end_of_rotateMotor 070A  
